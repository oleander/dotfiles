#!/usr/bin/env ruby
#
# This script manages a symlink between a global "mcp.json" and a project's local ".cursor/mcp.json".
# Usage:
#   ./manage_symlink.rb
#   ./manage_symlink.rb --dry
#   ./manage_symlink.rb -h
#
# Examples:
#   1) Run without arguments to prompt whether to merge the project's JSON into the global JSON
#      and then symlink the project file to the global one.
#   2) Pass --dry to see what would happen without making any changes.
#   3) Pass -h to show this help and exit.
#
# Steps:
#  - Checks that the global file (~/.dotfiles/claude/mcp.json) exists.
#  - Backs up both the global and project files before any modification.
#  - If the project file is not a symlink, shows a diff and asks if you'd like to merge it.
#  - Optionally merges (deep merge) and overwrites the global file, then symlinks.
#  - Restores files from backup if the script is interrupted (Ctrl-C).
#  - Cleans up backups on successful run (unless --dry is used).
#

require 'bundler/inline'

gemfile(true) do
  source "https://rubygems.org"
  gem "json"
  gem "fileutils"
  gem "diffy"
  gem "colorize"
  gem "deep_merge"
end

require 'pathname'
require 'deep_merge'

def colored_diff(old_content, new_content)
  Diffy::Diff.new(old_content, new_content, context: 3)
             .to_s.split("\n")
             .map do |line|
    if    line.start_with?('+') then line.green
    elsif line.start_with?('-') then line.red
    elsif line.start_with?('@') then line.yellow
    else  line
    end
  end.join("\n")
end

def backup_file(path)
  FileUtils.mkdir_p('tmp')
  timestamp   = Time.now.to_i
  backup_name = "mcp_backup_#{path.basename}_#{timestamp}"
  backup_path = Pathname.new('tmp').join(backup_name)
  FileUtils.cp(path.to_s, backup_path.to_s)
  backup_path
end

def restore_file_if_unchanged(original_path, backup_path)
  return unless backup_path.exist?
  return unless original_path.exist?
  if original_path.read == backup_path.read
    FileUtils.cp(backup_path.to_s, original_path.to_s)
    puts "Restored #{original_path} from backup.".yellow
  end
end

# Handle flags
if ARGV.include?('-h') || ARGV.include?('--help')
  abort <<~HELP
    #{'Usage:'.light_blue}
      #{$0} [--dry] [-h]

    #{'Options:'.light_blue}
      --dry    Run without making any changes (non-destructive).
      -h       Show this help message.

    #{'Examples:'.light_blue}
      #{$0}
      #{$0} --dry
      #{$0} -h
  HELP
end

DRY_RUN = ARGV.include?('--dry')

GLOBAL_MCP_PATH    = Pathname.new(File.expand_path("~/.dotfiles/claude/mcp.json"))
PROJECT_DIRECTORY  = Pathname.new(".cursor")
PROJECT_MCP_PATH   = PROJECT_DIRECTORY.join("mcp.json")

abort("Global MCP file not found at #{GLOBAL_MCP_PATH}".red) unless GLOBAL_MCP_PATH.file?

PROJECT_DIRECTORY.mkdir unless PROJECT_DIRECTORY.exist?
PROJECT_MCP_PATH.write("{}") unless PROJECT_MCP_PATH.exist?

# Backup both files before any modifications
$global_backup_path  = backup_file(GLOBAL_MCP_PATH)
$project_backup_path = backup_file(PROJECT_MCP_PATH)

trap("SIGINT") do
  restore_file_if_unchanged(GLOBAL_MCP_PATH,  $global_backup_path)  if $global_backup_path
  restore_file_if_unchanged(PROJECT_MCP_PATH, $project_backup_path) if $project_backup_path
  abort("\nAborted by user.".red)
end

def symlink_mcp_file
  PROJECT_MCP_PATH.delete if PROJECT_MCP_PATH.exist?
  PROJECT_MCP_PATH.make_symlink(GLOBAL_MCP_PATH)
  puts "Symlinked #{GLOBAL_MCP_PATH} => #{PROJECT_MCP_PATH}".green
end

# If the project file is already a symlink
if PROJECT_MCP_PATH.symlink?
  puts "Overwriting existing symlink at #{PROJECT_MCP_PATH}".yellow
  symlink_mcp_file unless DRY_RUN
  exit 0
elsif !PROJECT_MCP_PATH.exist?
  puts "Creating new symlink at #{PROJECT_MCP_PATH}".green
  symlink_mcp_file unless DRY_RUN
  exit 0
end

puts "A non-symlink file exists at #{PROJECT_MCP_PATH}".yellow
puts "Attempting to deep merge project data into global MCP file.".yellow

# Parse JSON
project_content = PROJECT_MCP_PATH.read
begin
  project_data = JSON.parse(project_content)
rescue JSON::ParserError => e
  abort("Project file is invalid JSON: #{e.message}".red)
end

global_content = GLOBAL_MCP_PATH.read
begin
  global_data = JSON.parse(global_content)
rescue JSON::ParserError => e
  abort("Global file is invalid JSON: #{e.message}".red)
end

# Use the deep_merge gem for a true deep merge
merged_data = global_data.deeper_merge!(project_data)

puts "Diff (Global -> Merged):".light_blue
puts colored_diff(global_content, JSON.pretty_generate(merged_data))

print "Proceed with merge? [y/N]: ".light_blue
user_answer = $stdin.gets.strip.downcase
unless user_answer.include?('y')
  abort("Skipping merge.".yellow)
end

unless DRY_RUN
  GLOBAL_MCP_PATH.write(JSON.pretty_generate(merged_data))
  puts "Merged project data into global MCP file using deep_merge.".green
end

symlink_mcp_file unless DRY_RUN

# Cleanup backups on successful completion
unless DRY_RUN
  $global_backup_path.delete  if $global_backup_path.exist?
  $project_backup_path.delete if $project_backup_path.exist?
end
