#!/usr/bin/env ruby -w

# Git Time Since, version 0.2, 2011-03-08
# Copyright (c) 2011, Linus Oleander
# Released under the MIT licens

# Prints time since last commit and the amount of untracked files. 

# Example output: [UT 5 : AH 1 : 12 min]
# UT 5 => 5 untracked files.
# AH 1 => 1 commit that hasn't been pushed to origin.
# 12 min => 12 minutes since last commit.

# The ago_in_words method is brought to you by:
# => https://github.com/krainboltgreene/time-ago-in-words
# and modified by me.

require "time"

def ago_in_words(time)
  time_now = Time.now.to_i
  time_then = time.to_i
  time_between = time_now - time_then
  a_second     = 1
  a_minute     = a_second  * 60
  a_hour       = a_minute  * 60
  a_day        = a_hour    * 24
  a_week       = a_day     * 7
  a_fortnight  = a_day     * 14
  a_month      = a_week    * 4
  a_year       = a_week    * 52
  
  if time_between <= a_minute
    count = time_between
    "#{count} sec"
  elsif time_between <= a_hour
    count = time_between / a_minute
    "#{count} min"
  elsif time_between <= a_day
    count = time_between / a_hour
    "#{count} h"
  elsif time_between <= a_week
    count = time_between / a_day
    unit = "day#{'s' unless count == 1}"
    "#{count} #{unit}"
  elsif time_between <= a_month
    count = time_between / a_week
    unit = "week#{'s' unless count == 1}"
    "#{count} #{unit}"
  elsif time_between <= a_year
    count = time_between / a_month
    "#{count} month"
  else
    "N"
  end
end

# Returns the amount of untracked files
def ua
  (data.split("\n").length - 1).to_s
end

# Returns the amount of commits before origin
# So if you for example did 3 commits localy, without doing a push to origin
# Then this will return 3
def ah
  (data.match(/ahead (\d+)/).to_a[1] || 0).to_s
end

# Returns the time ago in words since last commit
# Will not print any errors
def time
  time = `git log "HEAD^..HEAD" --pretty=format:%cD 2> /dev/null`
  (time.empty? ? "N" : ago_in_words(Time.parse(time)))
end

# Is the current directory a git repo?
def git?
  ! `shopt -s nullglob dotglob; files=(*.git); if ((${#files[@]})); then echo "OK"; fi; shopt -u nullglob dotglob`.empty?
end

# Data to work with
# Will not print any errors
# Example output (linux-2.6)
## master
#   M include/linux/netfilter/xt_CONNMARK.h
#   M include/linux/netfilter/xt_DSCP.h
#   M include/linux/netfilter/xt_MARK.h
#   M include/linux/netfilter/xt_RATEEST.h
#   M include/linux/netfilter/xt_TCPMSS.h
#   M include/linux/netfilter_ipv4/ipt_ECN.h
#   M include/linux/netfilter_ipv4/ipt_TTL.h
#   M include/linux/netfilter_ipv6/ip6t_HL.h
#   M net/ipv4/netfilter/ipt_ECN.c
#   M net/netfilter/xt_DSCP.c
#   M net/netfilter/xt_HL.c
#   M net/netfilter/xt_RATEEST.c
#   M net/netfilter/xt_TCPMSS.c
def data
  @data ||= `git status --ignore-submodules -s -b 2> /dev/null`
end

puts "[UT " + ua + " : AH " + ah + " : " + time + "]" if git?