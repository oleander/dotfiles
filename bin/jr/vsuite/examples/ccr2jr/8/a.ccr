// test use of {} within regions
// -- once was an embarrassing parsing bug (2002-10-29)

// program (i.e., extra flags in bb) and output
// designed to be deterministic (i.e., split onto separate lines),
import edu.ucdavis.jr.JR;

public class a {

   private static int N = 10;
   // would-be processes
   private static op void depositer(int);
   private static op void fetcher(int);

   // the CCR
   private static bb mybb = new bb();

   private static sem done;

   public static void main(String [] args) {
        try {

	    // start up processes
	    for (int i = 1; i <= N; i++) {
	        send depositer(i);
	    }
	    for (int i = 1; i <= N; i++) {
	        send fetcher(i);
	    }

	    // wait for all processes to finish
	    for (int i = 1; i <= 2*N; i++) {
	        P(done);
	    }
	    JR.exit(0);

        }
        catch (Exception oops) {
            System.err.println("Exception while...\n");
            oops.printStackTrace();
        }
    }

    private static void depositer(int i) {
        try {
            _region bb _with thisbb = mybb _when thisbb.count<bb.N &&
        thisbb.dep && thisbb.turn == i {
                System.out.println("depositer "+i);
		if (i %2 == 0) {
		    System.out.println("even depositer "+i);
		}
		else { { { { { { { {
		    if (i > -3) {
		    System.out.println("odd depositer "+i);
		    }
		    else {
		    System.out.println("big oops "+i);
		    }
		} } } } } } } }
                Thread.sleep(1);
                thisbb.buf[thisbb.rear] = i*100;
                thisbb.rear = (thisbb.rear+1) % bb.N;
                thisbb.count++;
                thisbb.dep = !thisbb.dep;
		for (int k = 1, x = thisbb.front;
		     k <= thisbb.count;
		     k++, x = (x+1)%bb.N) {
		    System.out.println(" element "+k);
		    System.out.println(" value "+thisbb.buf[x]);
		}
            }
	    V(done);
        }
        catch (Exception oops) {
            System.err.println("Exception while...\n");
            oops.printStackTrace();
        }
    }

    private static void fetcher(int i) {
        try {
            if (i<4) Thread.sleep(4-i);
            _region bb _with thisbb = mybb _when thisbb.count>0
	        &&        ! thisbb.dep && thisbb.turn == i {
                System.out.println("fetcher "+i);
                System.out.println("fetch "+thisbb.buf[thisbb.front]);
                Thread.sleep(1);
                thisbb.front = (thisbb.front+1) % bb.N;
                thisbb.count--;
                thisbb.dep = !thisbb.dep;
                thisbb.turn++;
            }
	    V(done);
        }
        catch (Exception oops) {
            System.err.println("Exception while...\n");
            oops.printStackTrace();
        }
    }
}
