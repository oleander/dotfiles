/* tests 2-dim arrays of CCRs */

import edu.ucdavis.jr.JR;

public class a {

   private static final int NN = 3;

   // would-be processes
   private static op void depositer(int);
   private static op void fetcher(int);

   // the CCRs
   private static buffer [][] mybb = new buffer [NN][NN];
   static {
       for (int r = 0; r < NN; r++) {
          for (int c = 0; c < NN; c++) {
              mybb[r][c] = new buffer();
          }
       }
   }

   private static sem done;

   public static void main(String [] args) {
        try {

	    // start up processes
	    for (int i = 1; i <= 2*NN; i++) {
	        send depositer(i);
	    }
	    for (int i = 1; i <= NN; i++) {
	        send fetcher(i);
	    }

	    // wait for all processes to finish
	    for (int i = 1; i <= 3*NN; i++) {
	        P(done);
	    }
	    JR.exit(0);

        }
        catch (Exception oops) {
            System.err.println("Exception while...\n");
            oops.printStackTrace();
        }
    }

    private static void depositer(int h) {
        try {
            int i = (h-1) % NN;
            for (int d = 1; d <= NN; d++) {
            for (int k = 0; k < NN; k++) {
                int data = h*1000+(k+1);
                    _region buffer _with t = mybb[i][k] _when t.full<2 {
                        t.slot += data;
                        t.full++;
                        Thread.sleep(10);
                    }
                    Thread.sleep(10);
            }
            }
	    V(done);
        }
        catch (Exception oops) {
            System.err.println("Exception while...\n");
            oops.printStackTrace();
        }
    }

    private static void fetcher(int i) {
        try {
            for (int h = 1; h <= 2; h++) {
            for (int k = 0; k < NN; k++) {
                int result = -9999;
                    _region buffer _with t = mybb[i-1][k] _when t.full==2 {
                        Thread.sleep(10);
                        result = t.slot;
                        t.full = 0;
                        t.slot = 0;
                    }
                System.out.println("fetcher "+i+
                                   " on loop " + h +" " + (k+1) +
                                   " got " + result);
            }
            }
	    V(done);
        }
        catch (Exception oops) {
            System.err.println("Exception while...\n");
            oops.printStackTrace();
        }
    }

}
