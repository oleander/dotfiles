/* tests 1-dim arrays of CCRs  and also nested region statements. */

import edu.ucdavis.jr.JR;

public class a {

   // would-be processes
   private static op void depositer(int);
   private static op void fetcher(int);

   // the CCRs
   private static buffer [] mybb = new buffer [global.NN];
   static {
       for (int k = 0; k < global.NN; k++) {
           mybb[k] = new buffer();
       }
   }

   private static f myf = new f();
   private static r myr = new r();

   private static sem done;

   public static void main(String [] args) {
        try {

	    // start up processes
	    for (int i = 1; i <= global.ND; i++) {
	        send depositer(i);
	    }
	    for (int i = 1; i <= global.NF; i++) {
	        send fetcher(i);
	    }

	    // wait for all processes to finish
	    for (int i = 1; i <= global.ND+global.NF; i++) {
	        P(done);
	    }
	    JR.exit(0);

        }
        catch (Exception oops) {
            System.err.println("Exception while...\n");
            oops.printStackTrace();
        }
    }

    private static void depositer(int i) {
        try {
            for (int k = 1; k <= 5; k++) {
                int data = i*1000+k;
                _region r _with xr = myr _when xr.turn==i {
                    _region buffer _with xb = mybb[xr.rear] _when !xb.full {
                        xb.slot = data;
                        xb.full = true;
                    }
                    xr.rear = (xr.rear+1) % global.NN;
                    xr.turn--; if (xr.turn<1) xr.turn = global.ND;
                }
            }
	    V(done);
        }
        catch (Exception oops) {
            System.err.println("Exception while...\n");
            oops.printStackTrace();
        }
    }

    private static void fetcher(int i) {
        try {
            Thread.sleep(10);
            for (int k = 1; k <= 5; k++) {
                int result = -9999;
                _region f _with xf = myf _when xf.turn==i {
                    _region buffer _with xb = mybb[xf.front] _when xb.full {
                        result = xb.slot;
                        xb.full = false;
                    }
                    xf.front = (xf.front+1) % global.NN;
                    xf.turn++; if (xf.turn>global.NF) xf.turn = 1;
                }
                System.out.println("fetcher " + i + " got " + result);
            }
	    V(done);
        }
        catch (Exception oops) {
            System.err.println("Exception while...\n");
            oops.printStackTrace();
        }
    }

}
