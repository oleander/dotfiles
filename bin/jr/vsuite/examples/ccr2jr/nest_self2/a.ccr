/* this test should be detected by jrc as reusing variable m
 * (illegal via Java rules).
 */

import edu.ucdavis.jr.JR;

public class a {

   private static int N = 10;
   // would-be processes
   private static op void p(int);

   // the CCR
   private static mutex mtx = new mutex();


   public static void main(String [] args) {
        try {

	    // start up processes
	    for (int i = 1; i <= N; i++) {
	        send p(i);
	    }

            // long enough to shutdown
            Thread.sleep(2000);
	    JR.exit(0);

        }
        catch (Exception oops) {
            System.err.println("Exception while...\n");
            oops.printStackTrace();
        }
    }

    private static void p(int i) {
        try {
            Thread.sleep(10-i);
            _region mutex _with m = mtx _when m.xfree {
                System.out.println("someone got in"); Thread.sleep(1);
                m.xfree = false;
                Thread.sleep(2);
// should hang here
                _region mutex _with m = mtx {
                    System.out.println("OOPS" + i + " done"); Thread.sleep(1);
                    m.xfree = true;
                }
            }
        }
        catch (Exception oops) {
            System.err.println("Exception while...\n");
            oops.printStackTrace();
        }
    }
}
