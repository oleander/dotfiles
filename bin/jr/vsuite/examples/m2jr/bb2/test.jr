// note: very nondeterministic due to the naps, and output is nondet too.
// gives different output when run with sc than with sw, su, or sx
// demonstrates effect of different signal discipline
// (of course, could be just scheduler, though; but it is not.)
// (output from sw and su is the same)
import edu.ucdavis.jr.JR;

public class test {

   // would-be processes
   private static op void p(int);

   // number of processes
   private static final int N = 10;

   // the monitor
   private static foo foofoo = new foo("foo");

   private static sem done;

   public static void main(String [] args) {
	    // start up processes
	    for (int i = 1; i <= N; i++) {
	        send p(i);
	    }

	    // wait for all processes to finish
	    for (int i = 1; i <= N; i++) {
	        P(done);
	    }
	    JR.exit(0);
    }


    private static void p(int i) {
        try {
            for (int j = 1; j <= 1; j++) { // yeah, just 1 iteration for now
                System.out.println(i + " before");
		int k;
                Thread.sleep(10-i);
		k = (i>5)?10:99;
		foofoo.enter(k);
                System.out.println(i + " in");
                Thread.sleep(2);
                System.out.println(i + " leaves");
		foofoo.xexit();
                System.out.println(i + " after");
            }
	    V(done);
        }
        catch (Exception oops) {
            System.err.println("Exception while...\n");
            oops.printStackTrace();
        }
    }

}
