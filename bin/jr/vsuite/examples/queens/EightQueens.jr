/* resource EightQueens */

/* SR version 2.3.1, December 1995 */


class EightQueens {
   public int solution = 0;
public int[] board = {0, 0, 0, 0, 0, 0, 0, 0};
EightQueens() {
   System.out.println(("  Solutions to the 8 queens problem"));
System.out.println(("  Each line lists, for columns 1:8, the row each queen occupies"));
System.out.println();
call place(1, board);
}

public boolean safe(int r, int c, int [] b) {
boolean a;
ProcBody:{
   {
      int j;
      
L1: for (j = 1; (j<=c - 1); j+=1) {
         {
            if ((((b[(c - j) - 1]==r) || (b[(c - j) - 1]==(r - j))) || (b[(c - j) - 1]==(r + j)))){
               a=false;
               break ProcBody;
               }
            }
         }
      }
   a=true;
   }
return a;
}

public void place(int c, int [] b) {
ProcBody:{
   {
      int r;
      
L2: for (r = 1; (r<=8); r+=1) {
         {
            b[(c) - 1]=r;
            if (safe(r, c, b)){
               if ((c==8)){
                  solution++;
                  if ((solution<10)){
                     System.out.print((solution) + "   ");
                     }
                  else if ((solution>=10)){
                     System.out.print((solution) + "  ");
                     }
                  {
                     int i;
                     
L3: for (i = 1; (i<=7); i+=1) {
                        {
                           System.out.print((b[(i) - 1]) + "  ");
                           }
                        }
                     }
                  System.out.println((b[(8) - 1]));
                  }
               else if ((c<8)){
                  call place(c + 1, b);
                  }
               }
            b[(c) - 1]=0;
            }
         }
      }
   }
}
}

