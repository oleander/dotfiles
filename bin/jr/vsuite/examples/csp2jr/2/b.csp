_program b {

  _specs {
    A [2][3] { o1(int); }

    B { o2(int); }
  }

  sem go;

  _process A (i, j) {
    P(go);
    int x;
    System.out.println("start of A " + i + " " + j);
    _i B?o1(x);
    System.out.println("in middle of A " + i + " " + j);
    _o B!o2(17);
    System.out.println(x);
    System.out.println("end of A " + i + " " + j);
  }

  _process B {
    // 2003-07-24 given hook is static and process info is non-static
    // need to use _dump_pidx only in non-static method, like here:
    System.out.println("start dumping pidx");
    _dump_pidx
    System.out.println("end dumping pidx");
    for (int k = 1; k <= 2*3; k++) {V(go);}

    int x;
    System.out.println("start of B");
    _o A[1][1]?o1(3);
    System.out.println("in middle of B");
    _i A[1][1]!o2(x);
    System.out.println(x);
    try {
      Thread.sleep(200);
    } catch (Exception oops) {oops.printStackTrace();}
    // sleep in hope that A[1][1] finished before B so output is deterministic
  }

}
