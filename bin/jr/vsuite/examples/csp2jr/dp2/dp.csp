/* dining philosophers
 */
_program dp {
  private static final int N = 5;
  private static final int rounds = 4;

  _specs {

    waiter [N] {
      need();
      hungry();
      full();
    }
    phil[N] {
      eat();
    }
  }

  _process waiter (i) {
    boolean peating = false, phungry = false;
    boolean haveL = false, haveR = true;
    if (i == 0) { haveL = haveR = true; }
    else if (i == N-1) { haveL = haveR = false; }
    // else "normal" case handled by initialization
    boolean dirtyL = false, dirtyR = false;
    final int L = (N+i-1) % N; // add N to keep result >= 0.
    final int R = (i+1) % N;
    _do
      _i (true) phil[i]?hungry() {
        phungry = true;
      }
      _g (phungry && haveL && haveR) {
        phungry = false;
        peating = dirtyL = dirtyR = true;
        _o phil[i]!eat();
      }
      _o (phungry && ! haveL) waiter[L]!need() {
        haveL = true;
      }
      _o (phungry && ! haveR) waiter[R]!need() {
        haveR = true;
      }
      _i (haveL && ! peating && dirtyL) waiter[L]?need() {
        haveL = dirtyL = false;
      }
      _i (haveR && ! peating && dirtyR) waiter[R]?need() {
        haveR = dirtyR = false;
      }
      _i (true) phil[i]?full() {
        peating = false;
      }
    _od
  }

  _process phil (i) {
    try {
    for (int k = 1; k <= rounds; k++) {
      if (i==0) {Thread.sleep(1000);}
      else {Thread.sleep(10*(N-i+2)+k);}
      _o waiter[i]!hungry();
      Thread.sleep(20*i+k);
      _i waiter[i]?eat();
      System.out.println(i + " eating " + k);
      Thread.sleep(30*(N-i+2)+k);
      _o waiter[i]!full();
    }
    } catch (Exception oops) {oops.printStackTrace();}
  }

}
