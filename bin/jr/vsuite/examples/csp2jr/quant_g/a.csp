// test quantifiers in _g

import java.util.*;
import java.io.*;

_program a {
    private static final boolean f = false;
    private static final boolean t = true;
    private static boolean init[][] = {
	{f,f,f,t,f,f,f,f,f,f},
	{f,f,f,t,f,f,f,f,f,f},
	{f,f,f,t,f,f,f,t,f,f},
	{t,t,t,f,t,f,f,f,f,f},
	{f,f,f,t,f,t,f,f,f,f},
	{f,f,f,f,t,f,t,f,f,t},
	{f,f,f,f,f,t,f,t,t,f},
	{f,f,t,f,f,f,t,f,t,f},
	{f,f,f,f,f,f,t,t,f,f},
	{f,f,f,f,f,t,f,f,f,f}
    };
    private static final int DIM = init[0].length;

    private static boolean connect[][] = new boolean [DIM][DIM];
    static {
	init_connect();
    }
    private static void init_connect() {
	for (int r = 0; r < DIM; r++) {
	    for (int c = 0; c < DIM; c++) {
		connect[r][c] = init[r][c];
	    }
	}
    };

    _specs {
	node[DIM] {barrier();}
    }
    
    _process node (i) {
	_do
            _g [xx=1 _to 2][jj=0 _to DIM-1] (connect[i][jj]) {
	        connect[i][jj] = f;
		System.out.println("2dq: "+i+" "+jj);
	    }
	_od
        // can you say barrier
        if (i != 0) {
	    _o node[0]!barrier();
	}
	else {
	    for (int k = 1; k < DIM; k++) {
		_i node[k]?barrier();
	    }
	    init_connect();
	}
	// make sure that connect gets initialized before proceeding
        if (i != 0) {
	    _o node[0]!barrier();
	}
	else {
	    for (int k = 1; k < DIM; k++) {
		_i node[k]?barrier();
	    }
	}

	_do
            _g [jj=0 _to DIM-1] (connect[i][jj]) {
	        connect[i][jj] = f;
		System.out.println("1dq: "+i+" "+jj);
	    }
	_od
    }
}

