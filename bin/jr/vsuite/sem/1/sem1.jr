// test optimization of semaphore operations
// 2000-11-15 presently not relevant for JR
// also JR doesn't support op restrictions

import edu.ucdavis.jr.JR;

public class sem1 {
	public static op void s1 ();
        // {send} # shouldn't be because it's exported

	private static op void s2 ();
	// {send} # should be sem
	
	private static op void s3 ();
	// {send} # shouldn't be because it's assigned to cap

	private static op void s4 ();
	// {send} # should be sem

	private static op void s5 ();
	// {send} # shouldn't be because it's has sched expr

	private static op void s6 ();
	// {send} # shouldn't be because it's not in class by itself

	private static op void s7 (int); //
	// {send} # shouldn't be because it has parameter

	private static op void s8 ();
	// {call,send} # should be -- never *really* called

	private static op void foo(cap void () );

	// would-be processes
	private static op void invoker();
	private static op void p();


	public static void main(String [] args) {
	    	cap void () c = s3;
		send c();
		send foo(c);
		send invoker();
		send p();
//// lazy automatic termination ;-)
//Thread.sleep(5000);
//JR.exit(0);

	}

	private static void invoker() {
		send s1(); send s2(); send s4(); send s5();
		send s6(); send s7(4); send s8();
	}

	private static void p() {
		int i;
		op void t();
		// {send} # shouldn't be because it's not resource level
		System.out.println(1111);
		send t();
		receive s1();
		receive s2();
		receive s3();
		send s2();
		System.out.println(8888);
		inni void s2() {
		    System.out.println(9999);
		}
	
		System.out.println(7777);
		receive s4();
		inni void s5() by 3 {}
		receive s6();
		receive s7(i);
		System.out.println(i);
		receive s8();
		receive t();
		inni void foo(cap void () x) {System.out.println("foo");}
		[] void s6() {System.out.println("s6");}
	
		System.out.println("done");
	}
}
