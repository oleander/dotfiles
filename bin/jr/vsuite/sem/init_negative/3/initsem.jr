// # test semaphore initialization, including arrays

import edu.ucdavis.jr.JR;

public class initsem {

    private static sem sema = 3;
    private static sem semb;
    private static sem semc;

    private sem semd = -1; // shouldn't be fine

        // would-be processes
        private op void a();
        private op void b();

	// controls when to finish
	private sem done =  0;

        public initsem(){
		P(semd);
		System.out.println(semd.length());

                send a();
                send b();

                P(semc);

		sem s = 3;
		System.out.println(s.length());

		// sem t[5] := (2,7,1,8,3)
		// initialization is slightly klunky.
		cap void ()t[] = new cap void()[5];
		int [] tinit = {2,7,1,8,3};
		for (int i = 0; i < 5 ; i++ ) {
		    t[i] = new sem(tinit[i]);
		}

	        for (int i = 0; i < 5; i++) {
		    System.out.print(t[i].length()+" ");
		}
		System.out.println("");

		//     sem u[3,2] := ((3, 1), (4, 1), (5, 9))
		cap void ()u[][] = new cap void()[3][2];
		int [][] uninit = { {3, 1}, {4, 1}, {5, 9} };
		for (int i = 0; i < 3 ; i++ ) {
		    for (int j = 0; j < 2 ; j++ ) {
		        u[i][j] = new sem(uninit[i][j]);
		    }
		}

		for (int i = 0; i < 3 ; i++ ) {
		    System.out.print(u[i][0].length()+" "+
		                     u[i][1].length()+" ");
		}
		System.out.println("");

		while(s.length()!=0) { P(s); }
		for (int i = 0; i < 3 ; i++ ) {
		    while(t[i].length()!=0) { P(t[i]); }
		    for (int j = 0; j < 2 ; j++ ) {
		        while(u[i][j].length()!=0) { P(u[i][j]); }
		    }
		}

		P(done);
		P(done);
		System.out.println("done");
        }


        private void a() {
		P(sema);
		P(sema);
		P(sema);
	    	System.out.println(1111);
		V(semb);
		P(sema);
		System.out.println(2222);
		V(semb);
		V(done);
        }


        private void b() {
	    	P(semb);
		System.out.println(3333);
		V(sema);
	    	P(semb);
		System.out.println(4444);
		V(semc);
		V(done);
        }
}
