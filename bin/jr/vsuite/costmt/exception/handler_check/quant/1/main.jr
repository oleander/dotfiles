import edu.ucdavis.jr.JR;

// test for correct parsing quantified costmt

public class main {

    public static void main(String [] args) {

	MyHandler [] mh = new MyHandler[3];
	for (int i = 0; i <= 2; i++)	{
		if (i % 2 == 0)
			mh[i] = new MyHandler2();
		else
			mh[i] = new MyHandler();
	}

	// normal quantified costmt
	co ((int i = 0; i <= 2; i++)) NormalGO(i)	{
		System.out.println("ppc" + i);
	}
	[] NormalGO(3);

	co NormalGO(4);
	[] ((int i = 5; i <= 7; i++)) NormalGO(i)	{
		System.out.println("ppc" + i);
	}

	// test of default handler with quantified arms
	co handler mh[0] over
	((int i = 8; i <= 10; i++)) GO(i) {
		System.out.println("ppc" + i);
	}
	[] GO(11);

	co handler mh[0] over
	GO(12);
	[] ((int i = 13; i <= 15; i++)) GO(i)	{
		System.out.println("ppc" + i);
	}

	// test of indexed handler with quantified arms
	co ((int i = 16; i <= 18; i++)) GO(i) handler mh[i-16] : {
		System.out.println("ppc" + i);
	}
	[] GO(19) handler mh[0] : ;
	[] ((int i = 20; i <= 22; i++)) GO(i) handler mh[i-20] : {
		System.out.println("ppc" + i);
	}

	// test of indexed handler with quantified arms
	co ((int i = 23; i <= 25; i++)) send GO(i) handler mh[i-23] : {
		System.out.println("ppc" + i);
	}
	[] send GO(26) handler mh[0] : ;
	[] ((int i = 27; i <= 29; i++)) send GO(i) handler mh[i-27] : {
		System.out.println("ppc" + i);
	}

	System.out.println("After co");

    }

    private static op String GO(int n) throws java.io.EOFException;

    private static process MYPROCESS	{
	while(true)	{
		inni String GO(int x) throws java.io.EOFException	{
			System.out.println("received GO: " + x);
			if (x > 0)
				throw new java.io.EOFException();
			return "HI";
		}
	}
    }

    private static op void NormalGO(int n)	{
    	System.out.println("received Normal GO: " + n);
    }

}
