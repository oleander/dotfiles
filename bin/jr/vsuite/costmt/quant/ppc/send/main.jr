// test co sends and co invocations of null.
// output nondeterministic (in its order).

public class main {
    private static cap void (int) c1, c2;

    public static void main(String [] args){
	co send q(111);
	[] q(222) { System.out.println(55); }
	[] send q(333);

	// send to some noops
	c1 = noop; c2 = c1;
	co p() { System.out.println(3); }
	[] send c2(2222) { System.out.println(4); }
	[] ((int i = 1; i <= 4; i++)) send c1(3000+i) {
	    System.out.println(9876 +" "+ i);
	}

	// all sends and a quantifier
	co send p() { System.out.println(33); }
	[] send c2(4000) { System.out.println(44); }
	[] ((int i = 8; i >= 5; i--)) send c1(5000+i) {
	    System.out.println(5432 +" "+ i);
	}

	// all sends to noops
	c1 = noop; c2 = c1;
	co send c2(6000) { System.out.println(444); }
	[] ((int i = 8; i >= 5; i--)) send c1(7000+i) {
	    System.out.println(1234 +" "+ i);
	}

	// all calls to noops
	co call c2(8000) { System.out.println(444); }
	[] ((int i = 8; i >= 5; i--)) send c1(9000+i) {
	    System.out.println(6789 +" "+ i);
	}

	// sends to noop and quantified sends
	c1 = noop; c2 = c1;
	co q(1111) { System.out.println(3); }
	[] send c2(2222) { System.out.println(4); }
	[] ((int i = 1; i <= 4; i++),(int j = 1; j <= 2; j++))
	      send q(i+100*j) {
	    System.out.println(i +" "+ j);
	}
	[] ((int i = 6; i <= 8; i++),(int j = 4; j <= 5; j++))
	      send c1(i+100*j) {
	    System.out.println(i +" "+ j);
	}

	// sends and calls and quantified sends
	c1 = q; c2 = c1;
	co q(1111) { System.out.println(-3); }
	[] send c2(2222) { System.out.println(-4); }
	[] ((int i = 1; i <= 4; i++),(int j = 1; j <= 2; j++))
	      send q(i+100*j) {
	    System.out.println(i +" "+ j);
	}
	[] ((int i = 6; i <= 8; i++),(int j = 4; j <= 5; j++))
	      send c1(i+100*j) {
	    System.out.println(i +" "+ j);
	}
    }

    private static op void q(int x) {
	System.out.println(10000+x);
    }
    private static op void p() {
	System.out.println(20000);
    }

}
