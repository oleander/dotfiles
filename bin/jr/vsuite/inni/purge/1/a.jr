/* SR version 2.3.1, December 1995 */

public class a {
    op void go(cap void(int));
    op void another(int);
    public a() {
    }

    process p1 {
	    send another(66);
	    send another(77);
	    inni void go(cap void(int) f){
		    send f(1234);
		    send another(88);
		    send f(9876);
		    send another(99);
	    }
    }

    process p {
	    for (int i = 1; i<=2; i++) {
		op void foo(int);
		// oops: originally code had
		//            send go(foo);
		// but that makes the output nondet!
		// (note that go serviced by p1 just once anyway.)
		if (i == 1) call go(foo);
		else send go(foo); // don't really need, just don't block.
		inni void foo(int x) { // only possible when i == 1
		    System.out.println(("foo1") + " " + (i) + " " + (x));
		}
		[] void another(int x) st i == 2 {
		    System.out.println(("another1") + " " + (i) + " " + (x));
		}
		System.out.println((i) + " " + foo.length() + " "
				   + another.length());
            
		while (i==2 && another.length()>0){
		    int x;
		    receive another(x);
		    System.out.println(("another2") + " " + (i) + " " + (x));
		}
		while (i==2 && foo.length()>0){
		    int x;
		    receive foo(x);
		    System.out.println(("foo2") + " " + (i) + " " + (x));
		}
            }
    }
}
