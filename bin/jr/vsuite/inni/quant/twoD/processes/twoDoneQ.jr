import edu.ucdavis.jr.JR;

// dynamic arrays of ops

public class twoDoneQ
{
  cap void (int) [][] p;

    final int N = 5;

  public twoDoneQ()
  {
  	try{
		JR.registerQuiescenceAction(done);
  	}
	catch(Exception e){e.printStackTrace();}

    		p = new cap void (int) [N][N];

		for (int i = 0; i < N; i++)
		{
			p[i] = new cap void (int) [N];
			for (int j = 0; j < N; j++)
				p[i][j] = new op void(int);
		}

		for (int i = 0; i < N; i++)
		{
		    for (int j = 0; j < N; j++) {
			    send p[i][j](100*(i+1)+j+1);
			    send p[i][j](400*(i+1)+j+1);
		    }
		}
	}
    
    process go ( (int i = 0; i < N; i++) ) {

	    // receive all sent above and then twice more to force else twice.
		for (int k = 1; k <= N*2+2; k++) {

		inni ((int j = 0; j < N; j++)) void p[i][j](int x)
		{
			System.out.println("p[" + i + "][" + j + "] received " + x);
		}
		[] else
		{
			System.out.println(i + " else "+k);
		}
		}

		System.out.println("done");
  }

  public static op void done()
  {
  	System.out.println("Quiescence!");
  }
}
