// test escape statements (exit, next, reply, return)
// from within else part of in statement.
// the compiler code for such is a bit tricky and was broken.

public class escape
{
	public op void ok(); // controls order of output (keeps deterministic)
	public op void p();
	public op void q();
	public op void pp();
	public op void sem1();
	public op void main();
	public op void sub();
	public op void g();
	public op void h();
	public op void x();
	public op void y();
	public op void f();
	public op void pr();
	public op void ztest();
	public op void z();

   public escape()
   {
	call p();
	call q();
	receive ok();
	send pp();
	send sem1();
	receive ok();
	call main();
	send g(); send h(); call sub();
	send g();           call sub();
	          send h(); call sub();
	                    call sub();
	send x();
	call y();
	call y();
	call y();

	for (int i = 0; i < 7; i++)
	    send z();
	call ztest();
	System.out.println("done");
    }


	// should be optimized to proc call
	public void p()
	{
		System.out.println("p");
	}

	// should not be optimized to proc call
	public void q()
	{
		System.out.println("q");
		reply;
		System.out.println("q replied");
		send ok();
	}

	public void pp()
	{
		inni void sem1()
		{
			// should cause compile time warning
			// since sem1 always invoked by send
			// NOTE: Not in JR
			System.out.println("sem1");
			reply;
			System.out.println("sem1 replied");
		}
	
		System.out.println("pp done");
		send ok();
	}

	// exercise exit, next, reply, return
	public void main()
	{
		while (true)
		{
			System.out.println("A");
			inni void f()
				System.out.println("B");
			[] else
			{
				System.out.println("C");
				break;
			}
		
			System.out.println("D");
		}
		send f();
		while (true)
		{
			System.out.println("A1");
			inni void f()
				System.out.println("B1");
			[] else
			{
				System.out.println("C1");
				break;
			}
		
			System.out.println("D1");
		}
		send f();
		while(true)
		{
			System.out.println("A2");
			inni void f()
			{
				System.out.println("B2");
				break;
			}
			[] else
			{
				System.out.println("C2");
				break;
			}
		
			System.out.println("D2");
		}
		System.out.println("E");
		for (int i = 1; i <= 2; i++)
		{
			System.out.println("F");
			inni void f()
				System.out.println("G");
			[] else
			{
				System.out.println("H");
				continue;
			}
		
			System.out.println("I");
		}
		System.out.println("J");
		call pr();
		receive ok();
		System.out.println("O");
		inni void f()
			System.out.println("P");
		[] else
		{
			System.out.println("Q");
			return;
		}
	
		System.out.println("R");
	}

	public void pr()
	{
		System.out.println("K");
		inni void f()
			System.out.println("L");
		[] else
		{
			System.out.println("M");
			reply;
		}
	
		System.out.println("N");
		send ok();
	}

	public void sub()
	{
		System.out.println("S1");
		inni void g()
		{
			System.out.println("S2");
			inni void h()
			{
				System.out.println("S3");
				return; /* from h */
			}
			[] else
			{
				System.out.println("S4");
				return; /* from g */
			}

			System.out.println("S5");
		}
		[] else
		{
			System.out.println("S6");
			inni void h()
			{
				System.out.println("S7");
				return; /* from h */
			}
			[] else
			{
				System.out.println("S8");
				return; /* from sub */
			}
		
			System.out.println("S9");
		}
	
		System.out.println("S10");
	}

	// for testing that next and exit really terminate the `in':
	// (the above tests didn't catch this...)
	public void x()
	{
		System.out.println("in x");
		reply;
		for (int i = 1; i <= 10; i++)
		{
			inni void y ()
			{
			    System.out.println("got y in loop " + i);
			    if (i == 1) continue;
			    if (i == 2) break;
			}
		
		}
		inni void y ()
			System.out.println("got y beyond loop");
	}

	// a similar test using a true semaphore
	// (z is a sem; y was a heavyweight op because it's called)
	public void ztest()
	{
		System.out.print("ztest:");
		for (int i = 1; i <= 5; i++)
		{
			System.out.print(" a");
			inni void z()
			{
				System.out.print("b");
				if (i == 2) continue;
				System.out.print("c");
				if (i == 4) break;
				System.out.print("d");
			}
		
			System.out.print("e");
		}
		System.out.println(" " + z.length());
	}
}
