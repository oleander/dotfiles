// test noop opcaps
// also some misc. tests of query ("?") operator

public class r
{
    op void intop(int);
    cap void (int) x, y, z;
    int j;
    cap void (int, String) rcap;

  public r()
  {
    rcap = report;
    x = new op void (int);
    y = intop;
    z = noop;

    report (report.length(), "begin");
    send intop (1);		// load the op queue
    send x (2);
    send y (3);
    send z (4);
    report (rcap.length(), "sent");	// query queue sizes

    for (int i = 1; i <= 2; i++)	//try with queue full and with it empty
    {
	while (true)		// receive in FIFO order until no more
	{
	    inni void x (int j) report (j, "got x");
	    [] void y (int j) report (j, "got y");
	    [] void z (int j) report (j, "OOPS -- got z!"); // shouldn't happen
	    [] else {report (0, "got nothing"); break;}
	   
	}
    }

    send z(99);
    inni void z (int k) report (k, "OOPS -- got input from noop!");
    [] else report (0, "else worked");
   

    //destroy z			# destroy of noop is a noop

    send x (5);			// should never be received:
    //destroy x			// op is destroyed
    x = new op void (int);	// and replaced with new one

    send intop (6);		// load queue again
    send x (7);
    send y (8);
    send z (9);
    report (rcap.length(), "sent");

    receive intop (j); report (j, "got intop");
    receive x (j); report (j, "got x");
    receive y (j); report (j, "got y");
    report (report.length(), "hanging");
    receive z (j);		// should hang here
    System.out.println("OOPS -- didn't block on input from noop!");
  }

  public op void report(int v, String s);
  public void report(int v, String s)
  {
	// print int arg; queue sizes; and string arg
	System.out.print("-" + v + "-  " + x.length() + "," + y.length() + "," + z.length() + "  " + s + "\n");
  }
}
