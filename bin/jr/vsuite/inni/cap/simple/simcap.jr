//  input from capability, single arm, local VM, no arrays

public class simcap
{
  cap void (int) c;
  public simcap()
  {
    op void q(int);
    c = q;
    int j;

    // a: test without using cap
    send q(1);
    receive q(j);
    System.out.println("a: " + j);

    // b: receive using cap
    send q (2);
    receive c (j);
    System.out.println("b: " + j);

    // c: send cap; dequeue using input stmt
    send c (3);
    inni void c (int i) System.out.println("c: " + i);

    // d: test st with by
    send q (6);
    send q (7);
    send c (5);
    send c (4);
    send c (9);
    send q (8);
    System.out.print("d: [" + q.length() + ";" + c.length() + "]");
    for (int i = 1; i <= 4; i++)
    {
	inni void c (int k) st (k % 2) == 1 by k
	    System.out.print(" " + k);
	[] else
	    System.out.print(" 0");

    }
    // remainder s/b in FIFO order
    for (int i = 1; i <= 3; i++)
    {
	inni void c(int k)
	    System.out.print(" " + k);

    }
    System.out.println();

    // e: (not used)

    // f: new op via prototype, simple test incl destroy
    c = new op void (int);
    send c (11);
    receive c (j);
    System.out.println("f: " + j);
    //destroy (c)

    // g: new op via optype, more complex test
    c = new op void (int);
    System.out.print("g: [" + q.length() + ";" + c.length() + "]");
    send c (21);
    send c (22);
    send c (23);
    send c (24);
    send c (98);
    send c (99);
    System.out.print(" [" + q.length() + ";" + c.length() + "]");
    for (int i = 1; i <= 4; i++)
    {
	inni void c(int k) System.out.print(" " +  k);
    }
    System.out.println(" [" + q.length() + ";" + c.length() + "]");
    //destroy c	# with some on queue

    // h: another one.  should have clean queue.
    c = new op void (int);
    System.out.print("h: [" + q.length() + ";" + c.length() + "]");
    send c (31);
    send c (32);
    send c (33);
    send c (34);
    send c (35);
    System.out.print(" [" + q.length() + ";" + c.length() + "]");
    while (c.length() > 0)
    {
	inni void c (int k) System.out.print(" " + k);
    }
    System.out.println(" [" + q.length() + ";" + c.length() + "]");
    // not destroyed; only wastes memory, no other problem


    inner();		// creates c, sends 41
    receive c(j);
    System.out.println("i: " + j);
    //destroy c

    // j: test "cap sem" and "new (sem)"
    cap void() d;
    d = new op void ();

    for (int i = 1; i <= 10; i++)
	send d();
    System.out.print("j: [" + d.length() + "]");
    receive d();
    System.out.print(" [" + d.length() + "]");
    while (true)
    {
        inni void d() st d.length() > 2
	    System.out.print(" [" + d.length() + "]");
	[] else
	{
	    System.out.print(" <else>");
	    break;
	}

    }
    System.out.print(" [" + d.length() + "]");
    receive d();
    receive d();
    System.out.println(" [" + d.length() + "]");
    //destroy d

    // k: dynamic op lives in a global
    send g.gcap(52);
    receive g.gcap(j);
    System.out.println("k: " + j);

    // that's all, folks
    System.out.println("done");
  }
    // i: op created in inner block should survive outside
    void inner ()
    {
	c = new op void (int);
	send c(41);
    }
}
