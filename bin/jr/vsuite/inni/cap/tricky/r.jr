// tricky cases involving input from cap, esp. class merging

public class r
{
  op void setcap();
  op void a1(int);
  op void a2(int);
  cap void (int) a3;
  cap void(int) chico;
  cap void(int) harpo;
  op void fini();
  public r()
  {
    // in input stmt below, a1 and a2 must be in same class
    // even though use of a2's cap comes lexically after the input stmt
    setcap();
    send a1(11);
	for (int i = 0; i < 100000; i++);  // skew timestamp problem
    send a2(12);
	for (int i = 0; i < 100000; i++);  // skew timestamp problem
    send a1(13);
	for (int i = 0; i < 100000; i++);  // skew timestamp problem
    send a2(14);
    while (true)
    {
	inni void a1(int n) System.out.println("a1: " + n);
	[] void a3(int n) System.out.println("a2: " + n);
	[] else break;

    }

    // b1 and b2 must be merged although they're assignment-incompatible
    op void b1(char);
    op void b2(char);
    send b1('A');
    send b2('B');
    cap void(char) b3 = b1;
    cap void(char) b4 = b2;
    send b1('C');
    send b2('D');
    while (true)
    {
	inni void b3(char c) System.out.println("b3: " + c);
	[] void b4(char c) System.out.println("b4: " + c);
	[] else break;

    }

    //  forwards inside nested inputs from opcaps
    chico = new op void(int);
    harpo = new op void(int);

    send listener();

    harpo(3);
    chico(5);
    fini();
    System.out.println("done");

  }

  op void listener();
  void listener()
  {
	while (true)
	{
	    inni void chico (int i)
	    {
		System.out.println("chico " + i);
		forward harpo(i + 2);
		inni void harpo(int j)
		{
		    System.out.println("   harpo " + i + " " + j);
		    if (i % 2 == 1)
		    {
			System.out.println("   fwd");
			forward chico(j + 3);
		    }
		}
	
	    }
	    [] void harpo (int j)
		System.out.println("harpo " + j);
	    [] void fini ()
	    {
		System.out.println("fini");
		break;
	    }
	   
	}
  }

  void setcap()
  {
     a3 = a2;
  }
}
