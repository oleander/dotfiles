// another test of else with multiple processes
// note: processes synchronize so execution is deterministic;
// (and also use st on inni)
// output is also deterministic.

public class a {
	public op void bozo(int);
	public op void hoho(int, int);
	public op boolean blocker();
	op void f(int);
	op void done();


   // control[t,i] is 0 if else present for hoho(i) during try t
   // otherwise it is value to send to f
   public int[][] control = {{29, 28, 27, 26, 25},
                             {24,  0, 23,  0, 22},
			     {21,  0,  0, 20, 19},
			     { 0,  0,  0,  0,  0},
			     { 0,  0, 18, 17,  0}};
   public int[][] output = {{-1, -1, -1, -1, -1},
                            {-1, -1, -1, -1, -1},
			    {-1, -1, -1, -1, -1},
			    {-1, -1, -1, -1, -1},
			    {-1, -1, -1, -1, -1}};

public a() {
   {
    for (int t = 1; (t<=5); t+=1) {
      {
         System.out.println(("****Try") + " " + (t));
         send f(9999);
         {
 for (int i = 1; (i<=5); i+=1) 
            if ((control[(t) - 1][(i) - 1]!=0)){
               {
                  send f(control[(t) - 1][(i) - 1]);
////////////////*************** why spin here??
		  for (int m = 0; m < 100000; m++);
                  }
               }
            }
         call bozo(t);
         {
L3: for (int i = 1; (i<=5); i+=1) {
               {
                  call hoho(t, i);
                  }
               }
            }
         {
L4: for (int k = 1; (k<=5); k+=1) {
               {
                  receive done();
                  }
               }
            }
         }
      }
   }
{
L5: for (int k = 1; (k<=5); k+=1) {
      {
         {
L6: for (int l = 1; (l<=5); l+=1) {
               {
                  System.out.print((output[(k) - 1][(l) - 1]));
                  if ((l==5)){
                     System.out.println();
                     }
                  else {
                     System.out.print((" "));
                     }
                  }
               }
            }
         }
      }
   }
{
L7: for (int k = 1; (k<=5); k+=1) {
L8: for (int l = 1; (l<=5); l+=1) 
      if ((control[(k) - 1][(l) - 1]!=output[(k) - 1][(l) - 1])){
         {
            System.out.println(("oops") + " " + (k) + " " + (l));
            //System.exit();
		edu.ucdavis.jr.JR.exit(1);
            }
         }
      }
   }
}

public void bozo(int t) {
ProcBody:{
   System.out.println(("bozo") + " " + (t));
   reply;
   // don't try this at home boys and girls
   inni void f(int x) st blocker() {
      {
         }
      }
  
   }
}

public void hoho(int t, int i) {
ProcBody:{
   reply;
   if ((control[(t) - 1][(i) - 1]==0)){
      inni void f(int x) st (x== -98765) /* always false */{
         {
            output[(t) - 1][(i) - 1]=x;
            }
         }
      [] else {
         output[(t) - 1][(i) - 1]=0;
         }
     
      }
   else {
      inni void f(int x) st control[t-1][i-1] == x {
         {
            output[(t) - 1][(i) - 1]=x;
            }
         }
     
      }
   send done();
   }
}

// the idea is to block bozo so that the hoho's get put on
// the new process list for f.

public boolean blocker() {
boolean b;
ProcBody:{
   b=true;
try{
    // this sleep period is probably excessive
    // but this use of sleep is OK.
   Thread.sleep(10000); // big enough for even very slow systems
}catch (Exception e){e.printStackTrace();}
   }
return b;
}
}
