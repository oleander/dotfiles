/* $Header: /etu/cvs/proj_barraf04/ex1_cvs/tp_rollercoaster/RollerCoaster.jr,v 1.6 2006/06/06 09:22:50 barraf04 Exp $ */
// 2006-09-13 From: "Francois Kilchoer" <kilchoer.eif@gmail.com>
// used to have a bug; now fixed

import edu.ucdavis.jr.JR;   //this class shows the general form of the C.S. problem
public class RollerCoaster{
	private static final int NB_PASSENGERS_BASE=13;
	private static final int PASSENGER_ITER_BASE=23;
	private static final int NB_WAGONS_BASE=1;
	private static final int NB_SEATS_BASE=5;
	private static final int WONDERING_TIME=11;
	private static final int TRACK_TIME=110;
	private static final int FOUR_ARGUMENTS =4;//pour le cas ou il y a 4 arguments à la ligne de commande
    private static final int THREE_ARGUMENTS=3;//pour le cas ou il y a 3 arguments à la ligne de commande
    private static final int TWO_ARGUMENTS = 2;//pour le cas ou il y a 2 arguments à la ligne de commande
    private static final int ONE_ARGUMENT=1;//pour le cas ou il y a 1 argument à la ligne de commande
	private static final int NB_OF_ARGUMENTS=4; //nombre d'arguments max sur la ligne de commande
	private static int nb_passengers;
	private static int passenger_iter;
	private static int nb_wagons;
	private static int nb_seats;
	
	op int getInRollerCoaster(int);
	op void getOutRollerCoaster(int,int);
	op boolean isOpen();
	op void closeRollerCoaster();
	op void quitPark();
	static op void closing();
	static op void nextwagonloading(int);
	static op void nextwagonunloading(int);
	
	private process passenger((int passenger=0;passenger<nb_passengers;passenger++)){
		boolean isOpen = isOpen();
		for (int i=0;i<passenger_iter && isOpen;i++){
			//wonder in Park
			try{
				Thread.sleep(WONDERING_TIME);
				//“enter roller coaster”
				int my_wagon; //valeur du wagon dans lequel le passager va entrer
				my_wagon = getInRollerCoaster(passenger);
				//“yell… vomit”
				//“ouf” done
				call getOutRollerCoaster(my_wagon,passenger);
				isOpen = isOpen();
			}catch (java.lang.InterruptedException e){
				e.printStackTrace();
			}
		}
		send quitPark();
	}
	
	private process wagon((int wagon=0;wagon<nb_wagons;wagon++)){
		int passenger_in_wagon=0;
		boolean running_wagon=false;
		boolean can_deposit=false;
		while(true){
			try{
				//barrière pour ne faire passer qu'un wagon à la fois
				//boucle pour éliminer la variable partagée du wagon courant
				//while(!running_wagon){
				inni void nextwagonloading(int current_wagon) st current_wagon==wagon{
					running_wagon=true;
				}
			//}
				//wait for passengers
				while(passenger_in_wagon<nb_seats){
					inni int getInRollerCoaster(int client) st passenger_in_wagon<nb_seats{
						//load passengers
						passenger_in_wagon++;
						System.out.println("le client "+client+" entre dans le wagon "+wagon);
						return wagon;
					}
					[] void closing(){ //dernière itération
						if (passenger_in_wagon>0){
							//on enlève les sièges vides du wagon pour qu'il parte
							nb_seats=passenger_in_wagon;
							send closeRollerCoaster();
						}	
					}		
				}
				//go around track
				if (passenger_in_wagon==nb_seats){//le wagon peut partir
					//current_wagon=(current_wagon+1)%nb_wagons;//le wagon suivant peut récupérer des passagers
					running_wagon=false;
					send nextwagonloading((wagon+1)%nb_wagons);		
					Thread.sleep(TRACK_TIME);
				}
				//
				//while(!can_deposit){
				inni void nextwagonunloading(int current_wagon) st current_wagon==wagon{
					can_deposit=true;
				}
			//}
				//deposer voyageurs
				while(passenger_in_wagon>0){
					inni void getOutRollerCoaster(int passenger_wagon, int client) st (passenger_wagon==wagon ) {		
						//unload passengers 	
						System.out.println("le client "+client+" sort du wagon "+wagon);
						passenger_in_wagon--;
					}
				}
				can_deposit=false;
				send nextwagonunloading((wagon+1)%nb_wagons);
			}
			catch (java.lang.InterruptedException e){
				e.printStackTrace();
			}
		}
	}
	private process manager {
		boolean isOpen = true; //indique si le rollerCoaster est ouvert
		int clientsDansParc=nb_passengers; //indique le nombre de clients qui ne sont pas encore partis
		//doit rester en vie tant qu'il y a des passagers, qqch sait le nombre de passagers restants.
		while (clientsDansParc>0){
			inni boolean isOpen(){
				return isOpen;
			}
			[] void closeRollerCoaster(){
				isOpen=false;
			}	
			[] void quitPark(){
				clientsDansParc--;
			}
		}
	}
	
	
	public static void main(String[] args){
		if(args.length >NB_OF_ARGUMENTS){
            System.out.println(
                "use of RollerCoaster :"+
                " \n jr RollerCoaster, NB_PASSENGERS_BASE,PASSENGER_ITER_BASE,NB_SEATS_BASE,NB_WAGONS_BASE");
            System.exit(0); //quitte le programme
        }
        //récupération des arguments
        int argc = args.length; //variable contenant le nombre d'arguments
        int var1 = NB_PASSENGERS_BASE; //variable contenant le 1er argument
        int var2 = PASSENGER_ITER_BASE;//variable contenant le 2ème argument
        int var3 = NB_SEATS_BASE; //variable contenant le 3ème argument
        int var4 = NB_WAGONS_BASE; //variable contenant le 4ème argument
        //récupération des arguments en ligne de commande
        switch (argc){
            case FOUR_ARGUMENTS : var4 = Integer.parseInt(args[--argc]);
            case THREE_ARGUMENTS : var3 = Integer.parseInt(args[--argc]);
            case TWO_ARGUMENTS : var2 = Integer.parseInt(args[--argc]);
            case ONE_ARGUMENT : var1 = Integer.parseInt(args[--argc]);
        }
        //assignation des valeurs données en paramètres
        nb_passengers=var1;
        passenger_iter= var2;
        nb_seats = var3;
        nb_wagons = var4;
        new RollerCoaster();
        send nextwagonloading(0);
        send nextwagonunloading(0);
		try{
            JR.registerQuiescenceAction(done);  
        }
        catch (edu.ucdavis.jr.QuiescenceRegistrationException e){
            e.printStackTrace();    
        }
	}
	//méthode effectuée lorsque tous les process sont terminés (ou en deadlock)
	private static op void done(){
		call closing();
		// System.out.println("--- l'attraction est terminée --- "+
		//        					"\n il reste le dernier wagon (le non-plein) à décharger");
        System.out.println("--- l'attraction est termine --- "+
        					"\n il reste le dernier wagon (le non-plein)   d charger");
    }
}

/*
* $Log: RollerCoaster.jr,v $
* Revision 1.6  2006/06/06 09:22:50  barraf04
* Version avec un bug dans
* jr translator (1.5.0_06)
* lors de l'ajout d'un manager
*
* Revision 1.5  2006/06/06 08:32:50  barraf04
* modifications:
* -plus de variables partagées (current_wagon)
* -pas de processus bloqués
* - pas de messages restants
* TODO
* - faire le voyage du dernier wagon et éviter que le dernier passager fasse plusieurs itérations
* -10 commandements
*
* Revision 1.4  2006/06/06 07:14:33  barraf04
* - le dernier wagon part avec le reste des passagers
* TODO:
* -10 commandements
* - tester le bon fonctionnement
*
* Revision 1.3  2006/06/06 06:56:03  barraf04
* résolution du problème suivant :
* - parfois la simulation s'arrêtait alors que des wagons étaient encore en gare et que des clients voulaient monter.
* ajout de static op nextwagon() pour lancer les wagons les uns après les autres
* TODO: lancer le dernier wagon de la simulation, même s'il n'est pas plein
*
* Revision 1.2  2006/05/31 13:14:51  barraf04
* retrait du manager
* les clients savent dans quel wagon ils sont
*
* Revision 1.1  2006/05/31 11:45:03  barraf04
* version squelette
* - à réaliser avec plusieurs wagons
* - voir si la classe manager (Track) est vraiment nécessaire
*
*/
