import java.util.*;

public class ResourceAllocatorM<E> {

  public op Set<E> allocate(int n);
  public op void release(Set<E> us);

  private Queue<E> units = new ArrayDeque<E>();
  private op Set<E> retry(int n);

  private Set<E> take(int n) {
    Set<E> ret = new HashSet<E>();
    for(int i=0; i<n; i++)
      ret.add(units.remove());
    return ret;
  }
  
  private process server {

    // check cap assignments
    cap Set<E> (int) c;
    cap List<E> (int) d;
    d = allocate;
    c = d;
    d = noop;
    send d(3);
    d = null;
    if (c == null)     System.out.println("oops1");
    if (d != null)     System.out.println("oops2");
    if (c == noop)     System.out.println("oops3");
    if (noop == d)     System.out.println("oops4");
    if (c == d)        System.out.println("oops5");
    if (c != allocate) System.out.println("oops6");
    if (d == allocate) System.out.println("oops7");
    if (allocate != c) System.out.println("oops8");
    if (allocate == d) System.out.println("oops9");

    while (true) {
      System.out.println("server top");
      inni Set<E> c(int n) {
	System.out.println("server allocate "+n+" "+units.size());
	if (units.size() < n)
	  forward retry(n);
	else
	  return take(n);
      }
      [] void release(Set<E> us) {
	System.out.println("server release");
	units.addAll(us);
	while (retry.length()>0)
	  inni Set<E> retry(int n) {
	    forward allocate(n);
	  }
      }
    }
  }
  
  private static ResourceAllocatorM<Integer> ra = new ResourceAllocatorM<Integer>();

  public static void main(String[] args) {

    Set<Integer> units = new HashSet<Integer>();
    units.add(42);
    units.add(33);
    units.add(57);

    System.out.println("A");
    ra.release(units);
    units.clear();

    System.out.println("B");
    Set<Integer> us = ra.allocate(2);
    System.out.println("Allocated unit: "+us);
    send ra.release(us);

  }
}
