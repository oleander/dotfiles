import java.util.*;

public class MChan3<T> {

      public op void write(T item);
      public op Port<T> newPort();

      private Set<cap void(T)> ports = new HashSet<cap void(T)>();

      private process server {
          while(true) {
              inni void write(T item) {
                  for (cap void(T) port : ports)
                      send port(item);
              }
              [] Port<T> newPort() {
                  PortImpl port = new PortImpl();
                  ports.add(port.put);
                  return port;
              }
          }
      }

      private class PortImpl implements Port<T> {
          public op T read();

          private op void put(T item);
          private T item;
          private boolean full = false;

          private process server {
              while (true) {
                  inni T read() st full {
                      full = false;
                      return item;
                  }
                  [] void put(T item) st !full {
                      this.item = item;
                      full = true;
              }
          }
	  }
      }


      // so that testread does newPort before main does c.write.
      // (or use call and put reply in testRead;
      //  or better use call w/i inni for testRead.)
      private static sem go;

  private static op void testRead(MChan3 c) {
    Port<Integer> p = c.newPort();
    V(go);
    while (true)
      System.out.println("Read: "+p.read());
  }

  public static void main(String args[]) {
    MChan3<Integer> c = new MChan3<Integer>();
    send testRead(c);
    P(go);
    c.write(42);
    System.out.println("Wrote: 42");
    c.write(123);
    System.out.println("Wrote: 123");
  }


  }

