import edu.ucdavis.jr.Invocation;
import edu.ucdavis.jr.InvocationEnumeration;
import edu.ucdavis.jr.ArmEnumeration;

public class priorityServer
{
    public static op void task0(int priority);
    public static op void task1(int priority, int);
    public static op void task2(int priority, float);
    public static op void task3(int priority, int, int);
    public static op void task4(int priority, int, float);
    public static op void task5(int priority, float, int);
    public static op void task6(int priority, float, float);
    public static op void task7(int priority, int, int, int);
    public static op void task8(int priority, int, int, float);
    public static op void task9(int priority, int, float, int);

    public static sem hold, mainGo;

    protected static process server
    {
	    P(hold);
	    while ((task0.length() +
		task1.length() +
		task2.length() +
		task3.length() +
		task4.length() +
		task5.length() +
		task6.length() +
		task7.length() +
		task8.length() +
		task9.length()) != 0)
	    {
		inni with prio_select over
		void task0(int prio)
		{
		    System.out.println("task0: " + prio);
		}
		[] void task1(int prio, int i)
		{
		    System.out.println("task1: " + prio);
		}
		[] void task2(int prio, float f)
		{
		    System.out.println("task2: " + prio);
		}
		[] void task3(int prio, int i, int j)
		{
		    System.out.println("task3: " + prio);
		}
		[] void task4(int prio, int i, float f) 
		{
		    System.out.println("task4: " + prio);
		}
		[] void task5(int prio, float f, int i) 
		{
		    System.out.println("task5: " + prio);
		}
		[] void task6(int prio, float f, float j) 
		{
		    System.out.println("task6: " + prio);
		}
		[] void task7(int prio, int i, int j, int k) 
		{
		    System.out.println("task7: " + prio);
		}
		[] void task8(int prio, int i, int j, float f) 
		{
		    System.out.println("task8: " + prio);
		}
		[] void task9(int prio, int i, float f, int j) 
		{
		    System.out.println("task9: " + prio);
		}
	    }
	    V(mainGo);
    }
 
    static op Invocation prio_select(ArmEnumeration aEnum);
    static Invocation prio_select(ArmEnumeration aEnum)
    {
	Invocation cur = null;
	int best_prio = 0;

	while (aEnum.hasMoreElements())
	{
	    InvocationEnumeration invoc_enum =
				(InvocationEnumeration)aEnum.nextElement();

	    if (invoc_enum == null) continue;

	    while (invoc_enum.hasMoreElements())
	    {
		Invocation invoc = (Invocation)invoc_enum.nextElement();

		view invoc
		as (int cur_prio)
		{
		    if ((cur == null) || (cur_prio < best_prio))
		    {
			cur = invoc;
			best_prio = cur_prio;
		    }
		}
		as (int cur_prio, int i)
		{
		    if ((cur == null) || (cur_prio < best_prio))
		    {
			cur = invoc;
			best_prio = cur_prio;
		    }
		}
		as (int cur_prio, float i)
		{
		    if ((cur == null) || (cur_prio < best_prio))
		    {
			cur = invoc;
			best_prio = cur_prio;
		    }
		}
		as (int cur_prio, int i, int j)
		{
		    if ((cur == null) || (cur_prio < best_prio))
		    {
			cur = invoc;
			best_prio = cur_prio;
		    }
		}
		as (int cur_prio, int i, float j)
		{
		    if ((cur == null) || (cur_prio < best_prio))
		    {
			cur = invoc;
			best_prio = cur_prio;
		    }
		}
		as (int cur_prio, float i, int j)
		{
		    if ((cur == null) || (cur_prio < best_prio))
		    {
			cur = invoc;
			best_prio = cur_prio;
		    }
		}
		as (int cur_prio, float i, float j)
		{
		    if ((cur == null) || (cur_prio < best_prio))
		    {
			cur = invoc;
			best_prio = cur_prio;
		    }
		}
		as (int cur_prio, int i, int j, int k)
		{
		    if ((cur == null) || (cur_prio < best_prio))
		    {
			cur = invoc;
			best_prio = cur_prio;
		    }
		}
		as (int cur_prio, int i, int j, float k)
		{
		    if ((cur == null) || (cur_prio < best_prio))
		    {
			cur = invoc;
			best_prio = cur_prio;
		    }
		}
		as (int cur_prio, int i, float j, int k)
		{
		    if ((cur == null) || (cur_prio < best_prio))
		    {
			cur = invoc;
			best_prio = cur_prio;
		    }
		}
	    }
	}
	return cur;
    }
}
