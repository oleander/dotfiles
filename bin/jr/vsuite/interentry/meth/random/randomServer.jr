import edu.ucdavis.jr.Invocation;
import java.util.Random;
import edu.ucdavis.jr.InvocationEnumeration;
import edu.ucdavis.jr.ArmEnumeration;

public class randomServer
{
    public static op void random_0();
    public static op void random_1(int);
    public static op void random_2(int, int);
    public static op void random_3(int, int, int);
    public static op void random_4(int, int, int, int);
    public static op void random_5(int, float);
    public static op void random_6(int, float, int);
    public static op void random_7(float, int);
    public static op void random_8(float, int, float);
    public static op void random_9(float);
    protected static Random rand = new Random(10);

    public static sem hold, mainGo;

    protected static process server
    {
	    P(hold);
	    while ((random_0.length() +
		   random_1.length() +
		   random_2.length() +
		   random_3.length() +
		   random_4.length() +
		   random_5.length() +
		   random_6.length() +
		   random_7.length() +
		   random_8.length() +
		   random_9.length()) != 0)
	    {
		inni with in_random over
		void random_0()
		{ System.out.println(0);}
		[] void random_1(int i)
		{ System.out.println(1);}
		[] void random_2(int i, int j)
		{ System.out.println(2);}
		[] void random_3(int i, int j, int k)
		{ System.out.println(3);}
		[] void random_4(int i, int j, int k, int h)
		{ System.out.println(4);}
		[] void random_5(int i, float f)
		{ System.out.println(5);}
		[] void random_6(int i, float f, int j)
		{ System.out.println(6);}
		[] void random_7(float f, int i)
		{ System.out.println(7);}
		[] void random_8(float f, int i, float g)
		{ System.out.println(8);}
		[] void random_9(float f)
		{ System.out.println(9);}
	    }
	    V(mainGo);
    }

    static Invocation in_random(ArmEnumeration aEnum)
    {
	int num = 0;

	while (aEnum.hasMoreElements())
	{
	    InvocationEnumeration invoc_enum =
			(InvocationEnumeration) aEnum.nextElement();
	    if (invoc_enum != null)
		num += invoc_enum.size();
	}

	int rand = randomServer.rand.nextInt(num);

	aEnum.reset();
	while (aEnum.hasMoreElements())
	{
	    InvocationEnumeration invoc_enum =
			(InvocationEnumeration) aEnum.nextElement();
	    if (invoc_enum != null)
	    {
		if (rand >= invoc_enum.size())
		    rand -= invoc_enum.size();
		else
		{
		    while (rand > 0)
		    {
			invoc_enum.nextElement();
			rand--;
		    }
		    return (Invocation)invoc_enum.nextElement();
		}
	    }
	}
	// Shouldn't get here
	return null;
    }
}
