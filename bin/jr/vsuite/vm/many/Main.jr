//  Create and destroy virtual machines.
//
//  manyvm [ m [ n ]] -- create m virtual machines, n at a time
//
//  If this works for large m and n, then we must at least be recycling
//  file descriptors correctly.

// note: Thread.sleep in code to ensure that print thread gets
// a chance to run and output lines in order.

import edu.ucdavis.jr.JR;

public class Main {

    public static void main(String [] args) {

	remote r rcap;
	
	int m = 10;
	int n =  1;

            if (args.length > 0)
            {
                m = Integer.valueOf(args[0]).intValue();
                if (args.length > 1)
                {
                    n = Integer.valueOf(args[1]).intValue();
                }
            }

	// declare vmcap array one larger, so subscripts same as in SR code
	// (vmcap[0] is unused)
	vm vmcap[] = new vm[m+1];

	System.out.println("(we are vm 1)");
	    for (int i = 2; i <= m; i++ ) {
	        System.out.println("creating vm "+i);
	        vmcap[i] = new vm();
	        if (vmcap[i] == null) {
	            System.out.println("==== VM CREATION FAILED ====");
                    JR.exit(1);  // Where n is the exit value currently ignored
	        }
// System.out.println("created vm "+i);
// now works either way
	        rcap = new remote r(i) on vmcap[i];
//System.out.println("created r(i) "+i);
	        if ((i - n + 1) > 1) {
	            System.out.println("\t\t\t\tkilling "+ (i-n+1));
////**** no real equiv		    // destroy vmcap[i-n+1]
		    vmcap[i-n+1] = null;
	        }
	    }

	    for (int i = m-n+2; i <= m; i++) {
	        if( i > 1 ){
	            System.out.println("\t\t\t\tkilling "+ i);
////**** no real equiv		    // destroy vmcap[i]
		    vmcap[i] = null;
	        }
    	    }

            System.out.println("done");
	    JR.exit(0);
    }
}
