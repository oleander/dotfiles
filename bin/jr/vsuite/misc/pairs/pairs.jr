public class pairs
{ 
 private int N = 5;
 private op void node(int);
 private cap int(int,int) gab[] = new cap int (int,int)[N+1];
 private sem done;

 public pairs() {
    for (int j=0; j<=N; j++)
       { 
         gab[j] = new op int(int,int);
       }

    for (int i=1; i<=N; i++) 
       { send node(i); 
         try {
         Thread.sleep(i);
         Thread.yield();
         } catch (Exception e) { e.printStackTrace(); }
       }
 
    for (int k=1; k<=5; k++)
       { P(done); }

 } //end of pairs()



 private void node(int id) {
 ProcBody:{
   int buddy = 0;
   int z = 0;
int part;
      
     for (int j=1; j<=N; j++)
     {
       if (j!=id)
        {
         if (id > j) 
           { 
             System.out.println(id + " invites " + j);
             z = gab[j](id,buddy);
             if (j == 
z)
               buddy = j;
           }
         else if (id < j) 
           {
             System.out.println(id + " waits for " + j);
             inni int gab[id](int who, int status)  
               { System.out.println(id + " receives invitation from  " + who);
                 if (buddy == status)
                   { buddy = who;
                     part =  id;
                   }
                 else 
                   { part =  0; 
                   }
		 return part;
               }
            
           }
        }
     }

     if (buddy == 0) buddy=id;
     System.out.println("NODE " + id + " finishing up");
     
     V(done);   
 } //end of ProcBody
 } //end of node()

} //end of class pairs






