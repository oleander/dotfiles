import edu.ucdavis.jr.JR;

public class main
{

    public static op boolean terminate(double);

        // default values, eventually read as args
        static int N = 8;
    	static int PR = 2;
	static int S = N/PR;

	static double l, t, r, b, epsilon;

    public static void main(String [] args)
    {

        // eventually read as input
/////	l = 1; t = 0.5; r = 1; b = 0;
/////        epsilon = 0.1;
	l = 1; t = 2.1; r = 3.3; b = 4.9;
        epsilon = 0.3;

        // ****** for now
	if ( PR <= 1 ) {
	    System.out.println("need PR > 1; PR is " + PR);
	        JR.exit(0);  // Where n is the exit value currently ignored
        }

	// create instances of jacobi
        remote jacobi jcap[] = new remote jacobi[PR];
        System.out.println("before try");
            jcap[0] = new remote jacobi(1,N,PR,S,l,t,r,0.0);
	    System.out.println("after jcap");
	    for( int i = 1; i <= PR-2; i++ ) {
                jcap[i] = new remote jacobi(i+1,N,PR,S,l,0.0,r,0.0);
	    }
            jcap[PR-1] = new remote jacobi(PR,N,PR,S,l,0.0,r,b);

	// start the computation
        System.out.println("before start computation");
// 2000-03-06  noop not allowed for remote
// so change code in jacobi where send up.bottomrow and down.toprow

//	    send jcap[0].compute(noop, jcap[1], terminate);
	    send jcap[0].compute(jcap[0], jcap[1], terminate);
	    for( int i = 1; i <= PR-2; i++ ) {
                send jcap[i].compute(jcap[i-1],jcap[i+1],terminate);
	    }
//          send jcap[PR-1].compute(jcap[PR-2],noop, terminate);
            send jcap[PR-1].compute(jcap[PR-2],jcap[0], terminate);


	// do termination checks until convergence
        System.out.println("before convergence check");
	    int iters = 0;
            boolean ans = false;
	    while ( !ans ) {
	        iters++;
                inni boolean terminate(double diff)
		    st terminate.length() == PR by -diff {
		        ans = (diff <= epsilon);
			for( int i = 1; i <= PR-1; i++ ) {
			        inni boolean terminate(double diff_unused) {
			            return ans;
			        }
			}
			return ans;
		}
	
	    }
	    System.out.println("iters="+iters);

	    JR.exit(0);  // Where n is the exit value currently ignored
    }
}
