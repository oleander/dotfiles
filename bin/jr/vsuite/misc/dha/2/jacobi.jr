public class jacobi
{

    private op void start();
    public op void compute( remote jacobi up,
                            remote jacobi down,
                            cap boolean (double) terminate);
    public op void toprow   ( double [] );
    public op void bottomrow( double [] );

    // (former resource parameters)
    int id, N, PR, S;
    double xl, xt, xr, xb;

    public jacobi(int xid, int xN, int xPR, int xS,
                  double xl, double xt, double xr, double xb)
    {
        this.id = xid;
	this.N = xN;
	this.PR = xPR;
	this.S = xS;
	this.xl = xl;
	this.xt = xb;
	this.xr = xr;
	this.xb = xb;
            call start();  // start the client thread
	    // note: use call since grid needs to be initialized
	    // before compute runs!
	    // could just move start code here or send to start
	    // but have compute wait until start finishes.
    }

    private double grid[][][];
    private int cur = 0, nxt = 1;
    private double diff;

    private void start()
    {
int iters = 3;
        while (iters > 0) {
////System.out.println("iters="+iters+" S="+S+" N="+N);
	    iters--;
        }

        grid = new double[2][S+2][N+2];

	// initialize grid
	for( int g = 0; g <= 1; g++ ) {
	    for( int r = 0; r <= S+1; r++ ) {
	        grid[g][r][0] = xl;
	        grid[g][r][N+1] = xr;
		for( int c = 1; c <= N; c++ ) {
	            grid[g][r][c] = 0.0;
		}
	    }
	}
////System.out.println("here"+iters);
	if (id==1) {// top for process 1
	    for( int c = 0; c <= N+1; c++ ) {
                grid[cur][0][c] = grid[nxt][0][c] = xt;
	    }
	}
	if (id==PR) {// bottom for process PR
	    for( int c = 0; c <= N+1; c++ ) {
                grid[cur][S+1][c] = grid[nxt][S+1][c] = xb;
	    }
	}
////System.out.println("here"+iters);
    }

    public void compute( remote jacobi up,
                         remote jacobi down,
                         cap boolean (double) terminate) {
////        System.out.println("compute id="+id);
	    while( true ) {
	        // compute new values for grid points
                diff = 0.0;
 	        for( int r = 1; r <= S; r++ ) {
		    for( int c = 1; c <= N; c++ ) {
	                grid[nxt][r][c] =
	                    ( grid[cur][r-1][c] 
	                     +grid[cur][r][c-1] 
	                     +grid[cur][r+1][c] 
	                     +grid[cur][r][c+1]
			    ) / 4.0;
			diff = Math.max(diff,
                                    Math.abs(grid[nxt][r][c]-grid[cur][r][c]));
		    }
	        }
////            System.out.println("worker id="+id+
////	                       " done iteration");

	    // replace old values by new ones, and
	    // exchange top and bottom rows with neighbors
	    int tmp;
	    tmp = cur; cur = nxt; nxt = tmp;
// 2000-03-06 need next 2 "if" here since noop doesn't work now
	    if (id != 1 ) {
	        send up.bottomrow(grid[cur][1]);
////                System.out.println("worker SENT1 id="+id);
	    }
////            System.out.println("worker A id="+id);
	    if (id != PR ) {
	        send down.toprow(grid[cur][S]);
////                System.out.println("worker SENT2 id="+id);
	    }
////            System.out.println("worker B id="+id);
	    if (id != 1 ) {
////                System.out.println("worker RECV1 id="+id);
	        receive toprow(grid[cur][0]);
	    }
////            System.out.println("worker C id="+id);
	    if (id != PR ) {
////                System.out.println("worker RECV2 id="+id);
	        receive bottomrow(grid[cur][S+1]);
	    }

	    // check for termination
////            System.out.println("worker id="+id+
////	                       " checking terminate, diff="+diff);
	    if ( terminate(diff) )
	        break;
	    }
    }
}

