import edu.ucdavis.jr.JR;

public class worker
{
    private int me;
    private remote administrator admin;
    public op void init(remote administrator xadmin);

    public worker(int xme, remote administrator xadmin){
	    System.out.println("worker starting constructor");
	    me = xme;
	    admin = xadmin;
	    System.out.println("worker finishing constructor");
     }

    private double f(double x) {
        return Math.pow(x,3.0);
    }

    private process start {
        double a, b, m, fofa, fofb, fofm;
	double larea, rarea, tarea, diff;

        while (true) {
//	        System.out.println("worker "+me+" top of loop");
		receive admin.bag(a,b,fofa,fofb);
		m = (a+b)/2;  fofm = f(m);
		// compute larea, rarea, and tarea
		// using trapezoidal rule
		larea = (m - a) * (fofa + fofm) / 2.0;
		rarea = (b - m) * (fofm + fofb) / 2.0;
		tarea = (b - a) * (fofa + fofb) / 2.0;
		diff  = Math.abs(tarea - (larea + rarea));
		if (diff <= 0.001) { /* diff small enough */
		    send admin.result(larea + rarea);
		}
		else { // diff > 0.001 /* diff too large */
		    // just 1 new outstanding;
		    // other's will be "inherited" from current invocation.
		    // note: this must be a call because need to ensure
		    // it is handled before possible answers from
		    // either part below.
		    // one optimization, which would allow send here
		    // (assuming as in SR that messages from a given
		    // process to a second process arrive in order sent),
		    // is send just one interval to bag and
		    // have current process compute other interval.
		    call admin.outstanding();
		    send admin.bag(a, m, fofa, fofm);
		    send admin.bag(m, b, fofm, fofb);
		}
        }
    }
}
