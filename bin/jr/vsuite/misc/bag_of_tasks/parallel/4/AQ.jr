import edu.ucdavis.jr.JR;

public class AQ
{
    private op void bag(double, double, double, double);
    private op void result(double);
    private op void outstanding(); // for termination

    private op void administrator();
    private op void worker(int);

    public AQ() {
        int N = 10;
	    System.out.println("AQ starting constructor");
	    send administrator();
	    for( int i = 1; i <= N; i++ ) {
		 send worker(i);
	    }
	    System.out.println("AQ finishing constructor");
     }

    private double f(double x) {
        return Math.pow(x,3.0);
    }

    private void administrator() {
        double area = 0.0;
        double l = 0.0, r = 4.0;

	    send bag(l,r,f(l),f(r));

	    int stillneed = 1; // number of initial sends to bag.
	    // stillneed is number of areas for which still need answer,
	    // i.e., it's the number of areas still being computed.

            do {
//	        System.out.println("administrator top of loop, area="+area+
//                                   " "+stillneed+
//				   "?result = "+result.length()+
//                               " ?outstanding = "+outstanding.length() );

		// note: don't need to ensure preference
		// of outstanding over result
		// because new outstanding invocations are call invocations
		// and will be handled before any results for that
		// area (both parts) are sent.
  		inni void result(double part) {
		    area += part;
		    stillneed--;
		}
		[] void outstanding() {
		    stillneed++;
		}
	
            }
	    while (stillneed > 0 );

            System.out.println("administrator done loop, area="+area+
                                   " "+stillneed);
            System.out.println("?result = "+result.length()+
                               " ?outstanding = "+outstanding.length() );

    }

    private void worker(int i) {
        double a, b, m, fofa, fofb, fofm;
	double larea, rarea, tarea, diff;

        while (true) {
//	        System.out.println("worker "+i+" top of loop");
		receive bag(a,b,fofa,fofb);
		m = (a+b)/2;  fofm = f(m);
		// compute larea, rarea, and tarea
		// using trapezoidal rule
		larea = (m - a) * (fofa + fofm) / 2.0;
		rarea = (b - m) * (fofm + fofb) / 2.0;
		tarea = (b - a) * (fofa + fofb) / 2.0;
		diff  = Math.abs(tarea - (larea + rarea));
		if (diff <= 0.001) { /* diff small enough */
		    send result(larea + rarea);
		}
		else { // diff > 0.001 /* diff too large */
		    // just 1 new outstanding;
		    // other's will be "inherited" from current invocation.
		    // note: this must be a call because need to ensure
		    // it is handled before possible answers from
		    // either part below.
		    // one optimization, which would allow send here
		    // (assuming as in SR that messages from a given
		    // process to a second process arrive in order sent),
		    // is send just one interval to bag and
		    // have current process compute other interval.
		    call outstanding();
		    send bag(a, m, fofa, fofm);
		    send bag(m, b, fofm, fofb);
		}
        }
    }
}
