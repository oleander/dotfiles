From olsson Wed May 24 12:07:01 -0700 2000
Date: Wed, 24 May 2000 12:07:01 -0700
To: keen
Subject: something new
From: olsson (Ron Olsson)

A few computational intense (abusive?) tests, after running under 15
minutes on pi, give me errors I haven't seen before.  Seem repeatable.

(BTW, what happens in Java if overflow a double?  Get an exception?)


----------------------------------------------------------------------

/home/olsson/jr_vsuite/bag_of_tasks/parallel/resolve

gives me

Q finishing constructor
after new JRobject
administrator top of loop, area=2.581920641501681E-4 width left=44443.83045959473
administrator top of loop, area=0.0035114120724422868 width left=44443.66091918945
administrator top of loop, area=0.017195591472401198 width left=44443.49137878418
resolveCarefully() failed when called from j86ResolveInfallibly()



----------------------------------------------------------------------

/home/olsson/jr_vsuite/bag_of_tasks/parallel/memory

(partial output)

dministrator top of loop, area=2.3604262331231472E10 width left=3889.6781997680664
java.lang.OutOfMemoryErroradministrator top of loop, area=2.360570610773689E10 width left=3889.669723510742

java.lang.OutOfMemoryError
	at java.net.InetAddress.getHostAddress(InetAddress.java, Compiled Code)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java, Compiled Code)
	at java.lang.Thread.run(Thread.java, Compiled Code)
java.lang.OutOfMemoryError: java.util.LinkedList$Entry
	at java.util.LinkedList.addBefore(LinkedList.java, Compiled Code)
	at java.util.LinkedList.add(LinkedList.java, Compiled Code)
	at InOp_doubleXdoubleTovoid_impl.send(InOp_doubleXdoubleTovoid_impl.java, Compiled Code)
	at InOp_doubleXdoubleTovoid_impl.send(InOp_doubleXdoubleTovoid_impl.java, Compiled Code)
	at AQ.worker(AQ.java:243)
	at AQ.access$1(AQ.java, Compiled Code)
	at AQ$ProcOp_intTovoid_implworker$sendThread.run(AQ.java, Compiled Code)        at java.lang.Thread.run(Thread.java, Compiled Code)
administrator top of loop, area=2.3607151209263683E10 width left=3889.661247253418


----------------------------------------------------------------------


From keen@cs.ucdavis.edu  Wed May 24 12:18:09 2000
Date: Wed, 24 May 2000 12:14:52 -0700 (PDT)
From: Aaron Keen <keen@cs.ucdavis.edu>
To: olsson@cs.ucdavis.edu
Subject: Re: something new


  >(BTW, what happens in Java if overflow a double?  Get an exception?)
	I'm not sure.  It might raise a runtime error.

  >----------------------------------------------------------------------
  >
  >/home/olsson/jr_vsuite/bag_of_tasks/parallel/resolve
  >
  >resolveCarefully() failed when called from j86ResolveInfallibly()

	I don't know where this is coming from.  My guess is something
in the Java RTS.


  >----------------------------------------------------------------------
  >
  >/home/olsson/jr_vsuite/bag_of_tasks/parallel/memory
  >
  >java.lang.OutOfMemoryError

	This is odd.  I'll have to play with the system to try to determine
why it's running out of memory.  The messages that are being sent are
received so they shouldn't just be sitting around.

From olsson Wed May 24 12:20:59 -0700 2000
Date: Wed, 24 May 2000 12:20:59 -0700
To: keen@cs.ucdavis.edu
Subject: something new
From: olsson (Ron Olsson)

OK, but why don't you treat that as low priority (unless you're
inspired to track that down) and work on them later.  I'll just leave
them in the vsuite for now and move on to other tests.

From keen@cs.ucdavis.edu  Wed May 24 12:23:01 2000
Date: Wed, 24 May 2000 12:19:44 -0700 (PDT)
From: Aaron Keen <keen@cs.ucdavis.edu>
To: olsson@cs.ucdavis.edu
Subject: Re: something new


Okay.

From olsson Wed May 24 15:34:16 -0700 2000
Date: Wed, 24 May 2000 15:34:16 -0700
To: keen@cs.ucdavis.edu
Subject: something new
From: olsson (Ron Olsson)

I think you're right that out of memory causes all these problems.  I
get for blast/2:

administrator sent     k=910000
administrator sent     k=920000
administrator sent     k=930000
administrator sent     k=940000
resolveCarefully() failed when called from j86ResolveInfallibly()

Here's what I was going to send you, but I think above explains it...
So, I think we can ignore it.

----------------------------------------------------------------------


BTW, the original "memory" program was wrong in that width needs to be
initialized to a power of 2.  With that change, though, the program
now gives the "resolve" error.  (Although once it gave partial output
attached; seems to happen when I redirect output, e.g., jr main >&
zzzzout .)  Maybe they're related.

So, now have

resolve
resolve2 -- same as memory but w/ correct initialization, gives resolve error
memory   -- give memory error

(It's possible the memory error is due to having tons of left over
java processes running?)

----------------------------------------------------------------------
	at java.lang.Object.wait(Native Method)
	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java, Compiled Code)
	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java, Compiled Code)
	at sun.rmi.transport.ObjectTable$Reaper.run(ObjectTable.java, Compiled Code)
	at java.lang.Thread.run(Thread.java, Compiled Code)
    "RMI TCP Accept-1" (TID:0x40e89de0, sys_thread_t:0x44470d70, state:MW, native ID:0x2009) prio=5
	at java.lang.Integer.toString(Integer.java, Compiled Code)
	at java.lang.Integer.toString(Integer.java, Compiled Code)
	at java.lang.String.valueOf(String.java, Compiled Code)
	at java.lang.StringBuffer.append(StringBuffer.java, Compiled Code)
	at java.net.InetAddress.getHostAddress(InetAddress.java, Compiled Code)
	at sun.rmi.transport.tcp.TCPTransport.run(TCPTransport.java, Compiled Code)
	at java.lang.Thread.run(Thread.java, Compiled Code)
    "GC Daemon" (TID:0x40e87838, sys_thread_t:0x444326f0, state:CW, native ID:0x1807) prio=2
	at java.lang.Object.wait(Native Method)
	at sun.misc.GC$Daemon.run(GC.java, Compiled Code)
    "RMI RenewClean-[169.237.6.50:2677]" (TID:0x40e87928, sys_thread_t:0x4442cd88, state:MW, native ID:0x1406) prio=5
	at java.net.PlainSocketImpl.usingSocks(PlainSocketImpl.java, Compiled Code)
	at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java, Compiled Code)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java, Compiled Code)	at java.net.Socket.<init>(Socket.java, Compiled Code)
	at java.net.Socket.<init>(Socket.java, Compiled Code)
	at sun.rmi.transport.proxy.RMIDirectSocketFactory.createSocket(RMIDirectSocketFactory.java, Compiled Code)
	at sun.rmi.transport.proxy.RMIMasterSocketFactory.createSocket(RMIMasterSocketFactory.java, Compiled Code)
	at sun.rmi.transport.tcp.TCPEndpoint.newSocket(TCPEndpoint.java, Compiled Code)
	at sun.rmi.transport.tcp.TCPChannel.createConnection(TCPChannel.java, Compiled Code)
	at sun.rmi.transport.tcp.TCPChannel.newConnection(TCPChannel.java, Compiled Code)
	at sun.rmi.server.UnicastRef.newCall(UnicastRef.java, Compiled Code)
	at sun.rmi.transport.DGCImpl_Stub.dirty(Unknown Source)
	at sun.rmi.transport.DGCClient$EndpointEntry.makeDirtyCall(DGCClient.java, Compiled Code)
	at sun.rmi.transport.DGCClient$EndpointEntry.access$9(DGCClient.java, Compiled Code)
	at sun.rmi.transport.DGCClient$EndpointEntry$RenewCleanThread.run(DGCClient.java, Compiled Code)
	at java.lang.Thread.run(Thread.java, Compiled Code)
    "Finalizer" (TID:0x40e77320, sys_thread_t:0x80d0a88, state:CW, native ID:0xc04) prio=8
	at java.lang.Object.wait(Native Method)
	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java, Compiled Code)
	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java, Compiled Code)
	at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:174)
    "Reference Handler" (TID:0x40e773b0, sys_thread_t:0x80ca660, state:CW, native ID:0x803) prio=10
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java, Compiled Code)
	at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:114)
    "SIGQUIT handler" (TID:0x40e773e0, sys_thread_t:0x80cff38, state:R, native ID:0x402) prio=5
Monitor Cache Dump:
    <unknown key> (0x40e8df49): owner "RMI LeaseChecker" (0x826d0e0) 1 entry
    java.lang.ref.ReferenceQueue$Lock@40E87538/40EE82F8: <unowned>
	Waiting to be notified:
	    "RMI Reaper" (0x44472888)
    java.util.Hashtable@40E87290/40EE7518: owner "RMI LeaseChecker" (0x826d0e0) 1 entry
    java.lang.ref.Reference$Lock@40E773C0/40EAC830: owner "RMI LeaseChecker" (0x826d0e0) 1 entry
	Waiting to be notified:
	    "Reference Handler" (0x80ca660)
    sun.misc.GC$LatencyLock@40E878D0/40EE8B00: <unowned>
	Waiting to be notified:
	    "GC Daemon" (0x444326f0)
    java.util.LinkedList@40E8D480/40EDB7F8: owner "Thread-3" (0x4444f898) 1 entry
	Waiting to enter:
	    "Thread-10" (0x824dd08)
	    "Thread-9" (0x824db50)
	    "Thread-8" (0x8272160)
	    "Thread-7" (0x8242550)
	    "Thread-6" (0x82413e0)
	    "Thread-5" (0x8273928)
	    "Thread-4" (0x4446b9e8)
	    "Thread-2" (0x44465b80)
	    "Thread-1" (0x44464a98)
    java.lang.ref.ReferenceQueue$Lock@40E77338/40EACD00: <unowned>
	Waiting to be notified:
	    "Finalizer" (0x80d0a88)
    java.util.LinkedList@40E92530/40EF3308: <unowned>
	Waiting to be notified:
Registered Monitor Dump:
    PCMap lock: <unowned>
    utf8 hash table: <unowned>
    JNI pinning lock: <unowned>
    JNI global reference lock: owner "RMI LeaseChecker" (0x826d0e0) 1 entry
    BinClass lock: owner "RMI LeaseChecker" (0x826d0e0) 1 entry
    Class linking lock: owner "RMI LeaseChecker" (0x826d0e0) 1 entry
    System class loader lock: <unowned>
    Code rewrite lock: <unowned>
    Heap lock: owner "RMI LeaseChecker" (0x826d0e0) 1 entry
	Waiting to enter:
	    "Thread-3" (0x4444f898)
	    "RMI TCP Accept-1" (0x44470d70)
	    "RMI RenewClean-[169.237.6.50:2677]" (0x4442cd88)
    Monitor cache lock: owner "RMI LeaseChecker" (0x826d0e0) 2 entries
    Thread queue lock: owner "RMI LeaseChecker" (0x826d0e0) 2 entries
	Waiting to be notified:
	    "Thread-11" (0x80533b8)
    Monitor registry: owner "RMI LeaseChecker" (0x826d0e0) 1 entry


