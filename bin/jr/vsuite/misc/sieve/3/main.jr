// approximates SR book 178-9

import edu.ucdavis.jr.JR;

public class main
{

        // default values, eventually read as args
        static int N = 100;

// making worker static is more SR style than Java;
// should probably have a worker class, etc.
    private static op Wrets worker();

    private static op void all_done();

    public static void main(String [] args)
    {

//        System.out.println("before try "+N+" "+args.length);

 	if (args.length >= 1) {
	    N = Integer.parseInt(args[0]);
	}
	if (args.length > 1) {
            System.err.println("too many args " +args.length
	                       +"; extras ignored");
	}

            // create first worker instance and feed to it numbers.
	    Wrets c = worker();

	    for( int i = 2; i <= N; i++ ) {
	        send c.feed(i);
	    }
            send c.done();

	    receive all_done();
	    JR.exit(0);  // Where n is the exit value currently ignored
    }

    private static Wrets worker() {
        op void filter(int);
	op void done();
	Wrets c = new Wrets(filter, done);
	int n;
	    reply c;
            receive filter(n);
            System.out.println(n);
 	    Wrets child = null; // initialized just to keep Java quiet
	    boolean child_exists = false;
	    while( true ) {
	        inni void filter(int y) {
                        if ( y%n != 0 ) {
		            if ( !child_exists ) {
		                child = worker(); child_exists = true;
		            }
		            send child.feed(y);
		        }
	        }
	        [] void done() {
	            break;
	        }
	       
	    }
            if ( child_exists ) {
	        send child.done();
	    }
            else { // last child send done to main
	        send all_done();
	    }
	return null; // just to Java quiet (since reply above)
    }
}
