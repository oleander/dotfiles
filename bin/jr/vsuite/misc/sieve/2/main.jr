// approximates SR book 178-9

import edu.ucdavis.jr.JR;

public class main
{

        // default values, eventually read as args
        static int N = 100;

// making worker static is more SR style than Java;
// should probably have a worker class, etc.
    private static op Wrets worker();

    public static void main(String [] args)
    {

        System.out.println("before try");
            // create first worker instance and feed to it numbers.
	    Wrets c = worker();

	    for( int i = 1; i <= N; i++ ) {
	        send c.feed(i);
	    }
            send c.done();

	    JR.exit(0);  // Where n is the exit value currently ignored
    }

    private static Wrets worker() {
        op void filter(int);
	op void done();
	Wrets c = new Wrets(filter, done);
	int n;
        // this condition is always true, but use 
        // it to test compiler: 
        // compiler doesn't know enough, so "return null" would be required.
	if (c != null) {
	    reply c;
        }
            receive filter(n);
            System.out.println(n);
 	    Wrets child = null; // initialized just to keep Java quiet
	    boolean child_exists = false;
	    while( true ) {
	        inni void filter(int y) {
	                if ( y%n != 0 ) {
		            if ( !child_exists ) {
		                child = worker(); child_exists = true;
		            }
		            send child.feed(y);
		        }
	        }
	        [] void done() {
	            break;
	        }
	       
	    }
            if ( !child_exists ) {
	        send child.done();
	    }
// OK, we'll follow Java and require return here
//	return null; // just to Java quiet (since reply above)
    }
}
