import edu.ucdavis.jr.*;
import java.util.*;
import java.awt.*;

public class CAPAllocator extends Allocator {
	private static final int ANY = 2;
	// vars for writer weight,dynamic writer weight (not used), active readers and writers, and queued readers (not used)
	private double N = 5;
	private int dynamic_writer_weight = 0;
	private int nr = 0, nw = 0, qr = 0;
	// used for scheduled selection and records previous selection
	private int select = ANY, prev_sel = ANY;

	// reader and writer weights, reader weighting time, and scheduled readers and previously scheduled readers
	private float reader_weight, writer_weight;
	private int reader_waiting_time;
	private int sr, old_sr;
	// date set for current date
	private java.util.Date current_date = new Date();

	// start_read2 queue for adding date (aging ability) to readers
	private op void start_read2(java.util.Date, int);
	// used to maintain order with start_read2 queue
	private op void start_write2(int);
	private op void kill_assign_date ();	// kills process which assigns dates to incoming readers
	private op void begin2 ();				// starts the assign date process

	process allocate {
		receive begin();		// intiate allocator
		call begin2();			// intiate assign date process group

		while (true) {
			inni with CAPselect over	// used CAPselect selection method for scheduling
			// kills allocator and forwards readers and writers back to manager maintaining order
			void kill() {
				call kill_assign_date();
				while (start_read2.length() + start_write2.length() > 0) {
					inni void start_read2(java.util.Date d, int id) { forward start_read(id); }
					[] void start_write2(int id) { forward start_write(id); }
				}
				break;
			}
			// a reader enters the database
			[] void start_read2(java.util.Date d, int id) {
				forward activate(id);
			}
			// a reader exit the database
			[] void end_read(int id) {
				send removeUser(id);
			}
			// a writer enters the databse
			[] void start_write2(int id) {
				forward activate(id);
			}
			// a writer exits the database
			[] void end_write(int id) {
				send removeUser(id);
			}
			[] void pause () { setPaused(true); }		// pause and resume the database
			[] void resume () { setPaused(false); }
		}
	}

	// process forwards readers to queue which maintains a date for reader aging
	// and also forwards writers to maintain order
	process assign_date {
		receive begin2();

		while (true) {
			inni void kill_assign_date () { break; }
			[] void start_read (int id) { forward start_read2(new java.util.Date(),id); }
			[] void start_write (int id) { forward start_write2(id); }
		}
	}

	// checks for superior reader weight
	private op boolean reader_check () {
		return reader_weight > writer_weight;
	}

	// checks for superior writer weight
	private op boolean writer_check () {
		return reader_weight <= writer_weight;
	}

	// checks for more scheduled readers
	private boolean check() {
		if ( (select == READER) && (sr == 0) )
			return false;
		return true;
	}

	// method is used to schedule entrance to the database and implements
	// the CAP algorithm
	private Invocation CAPselect(ArmEnumeration armEnum) {
		// checks for pause and resum invocations, respecively, and returns them
		for (int i = 0; i < 5; i++) armEnum.nextElement();
		InvocationEnumeration pause_enum = (InvocationEnumeration) armEnum.nextElement();
		InvocationEnumeration resume_enum = (InvocationEnumeration) armEnum.nextElement();
		if(pause_enum.hasMoreElements())
			return (Invocation)pause_enum.nextElement();
		if(resume_enum.hasMoreElements())
			return (Invocation)resume_enum.nextElement();
		armEnum.reset();

		// locates and records the start and end write invocations
		InvocationEnumeration start_write_invocation;		//find start_write and end_write invocation enumerations
		InvocationEnumeration end_write_invocation;
		for (int i = 0; i < 3; i++) armEnum.nextElement();
		start_write_invocation = (InvocationEnumeration) armEnum.nextElement();
		end_write_invocation = (InvocationEnumeration) armEnum.nextElement();
		armEnum.reset();

		// adds the first invocation of each invocEnum to a vector for sorting
    	Vector v = new Vector();
		while (armEnum.hasMoreElements()) {
			InvocationEnumeration invocEnum = (InvocationEnumeration) armEnum.nextElement();
			if(invocEnum.size() > 0)
				v.add(new Element(invocEnum, ((Invocation)invocEnum.nextElement()).getTimestamp()));
		}

		// sorts invocation enumerations by time (increasing order)
    	Object arms [];
		arms = v.toArray();
    	if (arms.length == 0) return null;
    	Arrays.sort(arms, Element.comparator);


		// finds start_read invocation and records current date
		int new_reader_wait = 0;    
		armEnum.reset();
		armEnum.nextElement();
		InvocationEnumeration start_read_invocation = (InvocationEnumeration) armEnum.nextElement();
		start_read_invocation.reset();
		java.util.Date new_date = new Date();


		// calulates the reader waiting time using the current date and the reader date from
		// the start_read2 queue
		while (start_read_invocation.hasMoreElements()) {
			Invocation i = (Invocation) start_read_invocation.nextElement();

			view i
			as (java.util.Date d, int id) {
				if (d.getTime() > current_date.getTime())
					new_reader_wait += new_date.getTime() - d.getTime();
				else
					new_reader_wait += new_date.getTime() - current_date.getTime();
			}
		}


		// iterate through time ordered invoc enumerations
    	for(int i = 0; i < arms.length; i++){
        	int min = 0;
        	Invocation cur = null;
        	InvocationEnumeration invocEnum = ((Element)arms[i]).getInvocationEnumeration();
        	invocEnum.reset();

			// iterate through invocations
        	while(invocEnum.hasMoreElements()){
				//System.out.println("Weights: " + reader_weight + ", " + writer_weight);

            	Invocation invoc = (Invocation) invocEnum.nextElement();
                                          
				// extract parameters from invocations
            	view invoc
            	as () {													//kill
                	cur = invoc;
        	    }
				as (int id) {
					// if start write check if to allow entry
					if (invocEnum == start_write_invocation) {			//start_write
						if( (nw == 0) && (nr == 0) && (select != READER) && (!getPaused()) ) {
							nw++;
							current_date = new Date();
							cur = invoc;
						}
					}
					// if end write, exit writer and reschedule based on calucalted weights
					else if (invocEnum == end_write_invocation) {		//end_write
						nw--;
						reader_waiting_time += new_reader_wait;

						cur = invoc;

						//reschedule
						reader_weight = ((float)reader_waiting_time)/1000 + (float)(start_read2.length());
						writer_weight = old_sr*start_write2.length();

						if ( (start_read2.length() != 0) && (start_write2.length() != 0) ) {
							if (writer_weight >= reader_weight) {
								select = WRITER;
							}
							else {
								select = READER;
								old_sr = sr = start_read2.length();
							}
						}
						else if (start_read2.length() != 0) {
							select = READER;
							old_sr = sr = start_read2.length();
						}
						else if (start_write2.length() != 0) {
							select = WRITER;
						}
						else {
							old_sr = sr = 0;
							select = ANY;
						}

					}
					// if end read then exit the reader and reschedule based on reader and writer weights
					else {												//end_read
						nr--;
						cur = invoc;

						if ( ((select == READER) && (nr == 0)) || (select == ANY) ) {
							writer_weight = old_sr*start_write2.length();
							reader_weight = ((float)reader_waiting_time)/1000 + (float)(start_read2.length());

							if ( (start_read2.length() != 0) && (start_write2.length() != 0) ) {
								if (writer_weight >= reader_weight) {
									select = WRITER;
								}
								else {
									select = READER;
									old_sr = sr = start_read2.length();
								}
							}
							else if (start_read2.length() != 0) {
								select = READER;
								old_sr = sr = start_read2.length();
							}
							else if (start_write2.length() != 0) {
								select = WRITER;
							}
							else {
								old_sr = sr = 0;
								select = ANY;
							}
						}
					}
        	    }
				// if start read then check if to allow entry
				as (java.util.Date d, int id) {							//start_read
					if( (nw == 0) && (select != WRITER) && check() && (!getPaused()) ) {
						if (select == READER) sr--;
						reader_waiting_time = 0;
						nr++;
						cur = invoc;
					}
				}
        		if(cur != null)
            		return cur;
        	}
                                                                                                             
        	if(cur != null)
            	return cur;
		}
		return null;
		// else return no invocation
	}

	// element class used to sort invocations by a given timestamp
	static class Element {
    	private InvocationEnumeration invoc;
    	private Timestamp ts;
                                                                                                                                             
    	public static final Comparator comparator = new Comparator() {
    		public int compare(Object o1, Object o2) {
        		return ((Element)o1).ts.compareTo(((Element)o2).ts);
      		}
                                                                                                                                             
      		public boolean equals(Object o1, Object o2) {
        		return o1.equals(o2);
      		}
    	};
                                                                                                                                             
    	public Element(InvocationEnumeration invoc, Timestamp ts) {
    		this.invoc = invoc;
    		this.ts = ts;
    	}
                                                                                                                                             
    	public InvocationEnumeration getInvocationEnumeration() {
    		return invoc;
    	}
                                                                                                                                             
    	public boolean equals(Object o2) {
      		return ((o2 instanceof Element) &&
              		(this.ts.equals(((Element)o2).ts)) &&
              		(this.invoc.equals(((Element)o2).invoc)));
		}
	}
}
