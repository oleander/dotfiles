/* Weak Writer Preference Allocator: processes all writers in the system before *
 * any readers.  On the exit of a all scheduled readers, a writer or readers    *
 * are randomly selected to enter the database next time.                       */

import java.util.Random;

public class WWPAllocator extends Allocator {
	private static final int ANY = 2;
	private int select = ANY, sr;			// selection variable and scheduled readers
	private int nr = 0, nw = 0;				// active readers and writers
	private Random rand = new Random();		// random generator

	// if no active writers then
	// checks if readers are selected and there are more scheduled readers
	//        else checks for no waiting writers
	private boolean reader_check () {
		if ( (nw == 0) && pause_check() ) {
			if (select == READER)
				return sr != 0;
			else if (select == WRITER)
				return false;
			else
				return start_write.length() == 0;
		}
		return false;
	}

	// checks for no active readers and writers and readers aren't selected
	private boolean writer_check () {
		if ( (nr == 0) && (nw == 0) && pause_check() ) {
			if (select != READER) return true;
		}
		return false;
	}

	process allocate {
		receive begin();

		while (true) {
			inni void kill() { break; }						// kills the allocator
			[] void pause () { setPaused(true); }			// pause and resume the manager
			[] void resume () { setPaused(false); }
			// starts a reader given reader_check
			[] void start_read(int id) st reader_check() {
				if (select == READER) sr--;
				nr++;
				forward activate(id);
			}
			// ends a read and if last reader to exit then reschedules randomly
			[] void end_read(int id) {
				nr--;
				send removeUser(id);

				if ( ((select == READER) && (nr == 0)) || (select == ANY) ){
					if ( (start_write.length() != 0) && (start_read.length() != 0))
						select = rand.nextInt(2);
					else
						select = ANY;

					if (select == READER)
						sr = start_read.length();
				}
			}
			// starts a writer given writer check
			[] void start_write(int id) st writer_check() {
				nw++;
				forward activate(id);
				select = ANY;
			}
			// writer exits and if no more writers then allows readers
			[] void end_write(int id) {
				nw--;
				send removeUser(id);

				if (start_write.length() != 0)
					select = WRITER;
				else
					select = ANY;
			}
		}
	}
}
