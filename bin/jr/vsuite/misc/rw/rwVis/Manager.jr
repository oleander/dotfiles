import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.util.*;
import edu.ucdavis.jr.JR;
import java.lang.*;

public class Manager {
	//private variables for the current type of allocator, the list of users, the list of active users(users who
	//are currently accessing the database) and the list of vms (assistant managers)
	private Allocator alloc;
	private java.util.List users = Collections.synchronizedList(new ArrayList());
	private java.util.List active = Collections.synchronizedList(new ArrayList());
	private java.util.List vmList = Collections.synchronizedList(new ArrayList());

	//ops for manager components to link to, to access manager functions
	public op void send_start(User);
	public op void repaintManager ();
	public op void repaintManagerVMList ();
	public op void start_read (int);
	public op void end_read (int);
	public op void start_write (int);
	public op void end_write (int);
	public op void activate (int);
	public op void kill ();
	public op void selectAllocator (String);
	public op void removeUser (int);
	public op void redraw (int);
	public op void change_iter (char, int);
	public op void newVM (String);
	public op void deleteVM (int);
	public op void pause ();
	public op void resume ();
	public op int getCount();
	public op int getRCount();
	public op int getWCount();
	public op Color getColor (int);
	public op boolean checkVMS ();
	public op void setPaused (boolean);
	public op boolean getPaused ();
	public op int getSize() { return active.size() + users.size(); }
	public op java.util.List getUsers() { synchronized(users) {	reply users; } }
	public op java.util.List getActive() { synchronized(users) { reply active; } }
	public op java.util.List getVMList() { synchronized(vmList) { reply vmList;	} }
	
	//constructor - create a new managerwindow, whose manager is this manager and
	//assign the current allocator to first come first serve
	public Manager () {
		assignAlloc(new FCFSAllocator());
		new ManagerWindow(this);
	}

	//get a type of user(all or only active) list from the manager
	//make a copy and return it
	public op java.util.List getUserList (int id, String str) {
        java.util.List list;
                                                                                                                                             
        if (str.equals("active"))
            list = active;
        else if (str.equals("users"))
            list = users;
        else
            return new ArrayList();
                                                                                                                                         
        java.util.List userList = new ArrayList();
                                                                                                                                             
        synchronized (list) {
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                User u = (User) itr.next();
                if (u.getAMID() == id)
                    userList.add(u);
    		}
    	}
                                                                                                                                             
    	return userList;
	}

	// assign a particular allocator by setting the allocators caps to specific required functions
	private void assignAlloc (Allocator alloc) {
		this.alloc = alloc;
		this.alloc.kill = this.kill;
		this.alloc.start_read = this.start_read;
		this.alloc.end_read = this.end_read;
		this.alloc.start_write = this.start_write;
		this.alloc.end_write = this.end_write;
		this.alloc.removeUser = this.removeUser;
		this.alloc.activate = this.activate;
		this.alloc.pause = this.pause;
		this.alloc.resume = this.resume;
		this.alloc.setPaused = this.setPaused;
		this.alloc.getPaused = this.getPaused;
		send alloc.begin();
	}

	// function to repaint all the screens
	private void repaint_all () {
		send repaintManager();
		synchronized (vmList) {
			Iterator itr = vmList.iterator();
			while (itr.hasNext()) {
				VMEntry entry = (VMEntry) itr.next();
				send entry.repaint();
			}
		}
	}

	// process to manage the removal from active list and activation of users into the active list
	process activelist {
		while (true) {
			inni void removeUser (int id) {
				synchronized(active) {
					Iterator itr = active.iterator();
					while (itr.hasNext()) {
						User u = (User) itr.next();
						if(u.getuid() == id) {
							itr.remove();
							break;
						}
					}
				}
				repaint_all();
			}
			[] void activate (int id) {
				synchronized(users) {
					Iterator itr = users.iterator();
					while(itr.hasNext()) {
						User u = (User) itr.next();
						if(u.getuid() == id) {
							itr.remove();
							active.add(u);
							break;
						}
					}
				}
				reply;
				repaint_all();
			}
		}
	}

	/*process that manages various options and functions of the manager :
	* selectAllocator : selects an allocator according to the input string
	* newVM : creates a new virtual machine with an assistant manager on it 
	* deleteVM : removes an assistant manager
	* checkVMs : checks if there is space for any more assistant managers
	* getColor : returns the color of a VM
	* send_start : adds a user to the user list, and sends a start op to the correct writer or reader queue
	*/
	process options {
		boolean unpause = false;
		int vms = 0;
		while(true) {
			inni void selectAllocator (String str) {
				if(getPaused() == false) {
					setPaused(true);
					unpause = true;
				}
				else {
					unpause = false;
				}
				while(active.size() > 0)
					Nap.nap(500);
				if (str.equals("FCFS") && !(alloc instanceof FCFSAllocator)) {
					call kill();
					assignAlloc(new FCFSAllocator());
				}
				else if (str.equals("RP") && !(alloc instanceof RPAllocator)) {
					call kill();
					assignAlloc(new RPAllocator());
				}
				else if (str.equals("WP") && !(alloc instanceof WPAllocator)) {
					call kill();
					assignAlloc(new WPAllocator());
				}
				else if (str.equals("WRP") && !(alloc instanceof WRPAllocator)) {
					call kill();
					assignAlloc(new WRPAllocator());
				}
				else if (str.equals("WWP") && !(alloc instanceof WWPAllocator)) {
					call kill();
					assignAlloc(new WWPAllocator());
				}
				else if (str.equals("ALT") && !(alloc instanceof ALTAllocator)) {
					call kill();
					assignAlloc(new ALTAllocator());
				}
				else if (str.equals("RAND") && !(alloc instanceof RANDAllocator)) {
					call kill();
					assignAlloc(new RANDAllocator());
				}
				else if (str.equals("AEP") && !(alloc instanceof AEPAllocator)) {
					call kill();
					assignAlloc(new AEPAllocator());
				}
				else if (str.equals("TFE") && !(alloc instanceof TFEAllocator)) {
					call kill();
					assignAlloc(new TFEAllocator());
				}
				else if (str.equals("NWP") && !(alloc instanceof NWPAllocator)) {
					call kill();
					assignAlloc(new NWPAllocator());
				}
				else if (str.equals("CAP") && !(alloc instanceof CAPAllocator)) {
					call kill();
					assignAlloc(new CAPAllocator());
				}
				else if (str.equals("CALP") && !(alloc instanceof CALPAllocator)) {
					call kill();
					assignAlloc(new CALPAllocator());
				}
				else if (str.equals("TIME") && !(alloc instanceof TIMEAllocator)) {
					call kill();
					assignAlloc(new TIMEAllocator());
				}
				else if (str.equals("RTS") && !(alloc instanceof RTSAllocator)) {
					call kill();
					assignAlloc(new RTSAllocator());
				}
				else if (str.equals("FCFSRP") && !(alloc instanceof FCFSRPAllocator)) {
					call kill();
					assignAlloc(new FCFSRPAllocator());
				}
				if(unpause == true) {
					setPaused(false);
				}
			}
			[] void newVM (String machine) {
				if (machine.equals(""))
					machine = "localhost";

				Myvm newVM;
				try {
					newVM = new Myvm(vms, machine) on machine;
				} catch (Exception e) { System.out.println("Virtual Machine cannot be created on " + machine); return; }

				VMEntry newEntry = new VMEntry(machine, Colors.get(), vms, this);
				synchronized (vmList) {
					vmList.add(newEntry);
				}

				new remote AssistantManager(this.remote, newEntry.remote) on newVM;
				send repaintManagerVMList();
				repaint_all();
				vms++;
			}
			[] void deleteVM (int id) {
				synchronized (vmList) {
					Iterator itr = vmList.iterator();
					while (itr.hasNext()) {
						VMEntry ent = (VMEntry) itr.next();
						if (ent.getID() == id) {
							itr.remove();
							Colors.checkin(ent.getColor());
						}
					}
				}
				send repaintManagerVMList();
			}
			[] boolean checkVMS () { return (vms < 9); }
			[] Color getColor (int id) {
				synchronized (vmList) {
					Iterator itr = vmList.iterator();
					while (itr.hasNext()) {
						VMEntry ent = (VMEntry) itr.next();
						if (ent.getID() == id)
							return ent.getColor();
					}
				}
				return null;
			}
			[] void send_start (User u) {

				users.add(u);

				if (u instanceof Reader)
					forward start_read(u.getuid());
				else if (u instanceof Writer)
					forward start_write(u.getuid());

				repaint_all();
			}
		}
	}

	//process to handle multiple instances to calling the pause function by the user and the system
	//so that if the user has paused, and the system goes into a pause state, the system wont unpause
	//and overide the user pause, and other such predicaments
	process pause_count_handle {
		boolean paused = false;
		int count = 0, rcount = 0, wcount = 0;
		while (true) {
			inni boolean getPaused () { return paused; }
			[] void setPaused (boolean p) { paused = p; }
			[] int getCount () { return count++; }
			[] int getRCount () { return rcount++; }
			[] int getWCount () { return wcount++; }
		}
	}

	//simple process to keep the program from quiescing
	process nap {
		while(true)
			Nap.nap(10000);
	}
}
