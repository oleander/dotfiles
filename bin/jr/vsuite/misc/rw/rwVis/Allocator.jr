public class Allocator {
	protected static final int READER = 0;
	protected static final int WRITER = 1;

	public cap void () kill;				// points to op in manager to recieve a signal to kill the allocator
	public cap void (int) start_read;		// points to the start_read queue in the manager
	public cap void (int) end_read;			// points to the end_read queue in manager
	public cap void (int) start_write;		// points to the start_write queue in manager
	public cap void (int) end_write;		// points to the end_write queue in manager
	public cap void (int) removeUser;		// points to op in manager to send a signal to remove user from display list
	public cap void (int) activate;			// points to op in manager to send signal to place reader/writer in active list
	public cap void () pause;				// recieves pause signal from manager
	public cap void () resume;				// recieves resume signal from manager
	public cap void (boolean) setPaused;	// sends signal to set pause variable in manager
	public cap boolean () getPaused;		// tests pause variable in manager

	public op void begin ();				// gets signal to initiate allocator

	protected op boolean pause_check () {	// checks for valid waiting pause requests
		return (pause.length() == 0) && !getPaused();
	}
}
