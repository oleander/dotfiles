/* Alternating Allocator: alternates between processing *
   a writer then all waiting readers.					*/

public class ALTAllocator extends Allocator {
	private static final int ANY = 2;
	private int select = ANY;
	int nr = 0, nw = 0, qr = 0;				// variables: active readers, active writers, scheduled readers

	process allocate {
		receive begin();					// intiate allocator

		while (true) {
			inni void kill() { break; }					// end allocator process
			[] void pause () { setPaused(true); }		// pause manager
			[] void resume () { setPaused(false); }		// resume manager

			// intiate read given no active writers, writers are schedules, system not pause, and checkReaders
			[] void start_read(int id) st ((nw == 0) && (select != WRITER) && (checkReaders()) && pause_check()){
				nr++;
				forward activate(id);

				// if readers are schedule, decrement readers scheduled to enter
				if(select == READER)
					qr--;
			}
			// end read and schedule
			[] void end_read(int id) {
				nr--;
				send removeUser(id);

				// if schedule readers is zero and there are writers waiting then schedule a writer
				if ( (start_write.length() != 0) && (qr == 0) )
					select = WRITER;
				// else allow any to enter next
				else if (qr == 0) {
					select = ANY;
				}
			}
			// intiate a write given no active readers or writers, readers not selected, and system not paused
			[] void start_write(int id) st ((nw == 0) && (nr == 0) && (select != READER) && pause_check()) {
				nw++;
				forward activate(id);
			}
			// end a write and reschedule
			[] void end_write(int id) {
				nw--;
				send removeUser(id);

				// if readers are waiting then schedule all waiting readers
				if (start_read.length() != 0) {
					select = READER;
					qr = start_read.length();
				}
				// otherwise allow any to enter database
				else
					select = ANY;
			}
		}
	}

	// false if all scheduled readers are done
	private boolean checkReaders () {
		if(select == READER)
			return (qr != 0);
		else
			return true;
	}
}
