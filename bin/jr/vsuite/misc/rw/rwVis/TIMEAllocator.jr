/* Time Slice Allocator: process readers and writesr alternatively given *
 * a fixed time slice                                                    */

import edu.ucdavis.jr.*;
import java.util.*;
import java.awt.*;

public class TIMEAllocator extends Allocator {
	private static final int ANY = 2;
	private double N = 5;									// not used
	private int nr = 0, nw = 0;								// active readers and writers
	private int select = ANY;								// selection variable
	private int sr;											// scheduled readers
	private Date date, cur_date, pause_date;				// manage time with date
	private boolean start_timer = true, reschedule = false;	// variables to manage timer

	process allocate {
		receive begin();

		while (true) {
			// use TIMEselect selection method over inni
			inni with TIMEselect over
			void kill() { break; }			// kill allocator
			[] void start_read(int id) {	// start a read
				forward activate(id);
			}
			[] void end_read(int id) {		// end a read
				send removeUser(id);
			}
			[] void start_write(int id) {	// start a write
				forward activate(id);
			}
			[] void end_write(int id) {		// end a write
				send removeUser(id);
			}
			[] void pause () { setPaused(true); }		//pause and resume allocator
			[] void resume () { setPaused(false); }
		}
	}

	// controls recheduling based off alternatinb principle and sets timer
	private void rescheduler ( int which ) {
		if ( (start_read.length() != 0) && (start_write.length() != 0) ) {
			if (which == WRITER)
				select = WRITER;
			else
				select = READER;
		}
		else if (start_read.length() != 0) {
			select = READER;
		}
		else if (start_write.length() != 0) {
			select = WRITER;
		}
		else {
			select = ANY;
		}
		start_timer = true;
		reschedule = false;
	}

	// implements the time slice algorithm
	private Invocation TIMEselect(ArmEnumeration armEnum) {
		// checks for pauses and accounts for the timer
		for (int i = 0; i < 5; i++) armEnum.nextElement();
		InvocationEnumeration pause_enum = (InvocationEnumeration) armEnum.nextElement();
		InvocationEnumeration resume_enum = (InvocationEnumeration) armEnum.nextElement();
		if(pause_enum.hasMoreElements()) {
			pause_date = new Date();
			return (Invocation)pause_enum.nextElement();
		}
		if(resume_enum.hasMoreElements()) {
			date.setTime(date.getTime() + ((new Date()).getTime() - pause_date.getTime()));
			return (Invocation)resume_enum.nextElement();
		}
		armEnum.reset();

		// finds and labels the read and write queues
		armEnum.nextElement();
		InvocationEnumeration start_read_invocation = (InvocationEnumeration) armEnum.nextElement();
		InvocationEnumeration end_read_invocation = (InvocationEnumeration) armEnum.nextElement();
		InvocationEnumeration start_write_invocation = (InvocationEnumeration) armEnum.nextElement();
		InvocationEnumeration end_write_invocation = (InvocationEnumeration) armEnum.nextElement();
		armEnum.reset();

		// puts invocation enum firsts and timestamp pairs into vector
    	Vector v = new Vector();
		while (armEnum.hasMoreElements()) {
			InvocationEnumeration invocEnum = (InvocationEnumeration) armEnum.nextElement();
			if(invocEnum.size() > 0)
				v.add(new Element(invocEnum, ((Invocation)invocEnum.nextElement()).getTimestamp()));
		}

		// sorts first by time
    	Object arms [];
		arms = v.toArray();
    	if (arms.length == 0) return null;
    	Arrays.sort(arms, Element.comparator);

		// sets current time and tests for recheduling
		cur_date = new Date();
		if ( (select != ANY) && ((new Date()).getTime() - date.getTime() > 10000) && (start_timer != true) )
			reschedule = true;

		// iterates through invoc enums
    	for(int i = 0; i < arms.length; i++){
        	int min = 0;
        	Invocation cur = null;
        	InvocationEnumeration invocEnum = ((Element)arms[i]).getInvocationEnumeration();
        	invocEnum.reset();

			// iterates through invocs
        	while(invocEnum.hasMoreElements()){
            	Invocation invoc = (Invocation) invocEnum.nextElement();
                                      
				// extracts parameters from invocs                                                                                                       
            	view invoc
            	as () {													//kill
                	cur = invoc;
        	    }
				as (int id) {
					// if start read then update timer
					if (invocEnum == start_read_invocation) {			//start_read
						if( (nw == 0) && (select != WRITER) && !getPaused() && !reschedule) {
							if (start_timer) {
								select = READER;
								date = new Date();
								start_timer = false;
							}
							nr++;
							cur = invoc;
						}
					}
					// if end read then test for reschedule
					else if (invocEnum == end_read_invocation) {		//end_read
						nr--;
						cur = invoc;

						if ( (start_read.length() == 0 && nr == 0) || reschedule )
							rescheduler(WRITER);
					}
					// if start write then update timer
					else if (invocEnum == start_write_invocation) {		//start_write
						if( (nw == 0) && (nr == 0) && (select != READER) && (!getPaused()) && !reschedule ) {
							if (start_timer) {
								select = WRITER;
								date = new Date();
								start_timer = false;
							}
							nw++;
							cur = invoc;
						}
					}
					// if end read then test for recheduling
					else if (invocEnum == end_write_invocation) {		//end_write
						nw--;
						cur = invoc;

						if ( (start_write.length() == 0) || reschedule )
							rescheduler(READER);
					}
        	    }
        		if(cur != null)
            		return cur;
        	}
		}
		return null;
	}

	// element used to sort invocations by time
	static class Element {
    	private InvocationEnumeration invoc;
    	private Timestamp ts;
                                                                                                                                             
    	public static final Comparator comparator = new Comparator() {
    		public int compare(Object o1, Object o2) {
        		return ((Element)o1).ts.compareTo(((Element)o2).ts);
      		}
                                                                                                                                             
      		public boolean equals(Object o1, Object o2) {
        		return o1.equals(o2);
      		}
    	};
                                                                                                                                             
    	public Element(InvocationEnumeration invoc, Timestamp ts) {
    		this.invoc = invoc;
    		this.ts = ts;
    	}
                                                                                                                                             
    	public InvocationEnumeration getInvocationEnumeration() {
    		return invoc;
    	}
                                                                                                                                             
    	public boolean equals(Object o2) {
      		return ((o2 instanceof Element) &&
              		(this.ts.equals(((Element)o2).ts)) &&
              		(this.invoc.equals(((Element)o2).invoc)));
		}
	}
}
