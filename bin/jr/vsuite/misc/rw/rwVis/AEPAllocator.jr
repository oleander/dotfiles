/* Alternating Exhaustive Priority Allocator: alternates between  *
 * exhaustively processing all writers in the system (active and  *
 * waiting) and exhaustively processing all readers				  */

public class AEPAllocator extends Allocator {
	private static final int ANY = 2;
	private int select = ANY;			// use to select entry for readers, writers, or any

	process allocate {
		receive begin();	// intiates allocator

		int nr = 0, nw = 0;	// variables story active readers and writers in database

		while (true) {
			inni void kill() { break; }					// kills this allocator process
			[] void pause () { setPaused(true); }		// pauses manager
			[] void resume () { setPaused(false); }		// resumes manager
			// initiates a read given no writers, writers aren't scheduled, and allocator isn't paused
			[] void start_read(int id) st ((nw == 0) && (select != WRITER) && pause_check()){
				nr++;
				forward activate(id);
			}
			// ends a read
			[] void end_read(int id) {
				nr--;
				send removeUser(id);

				// schedules next entry to database
				if ( start_read.length() + nr !=  0 )	// given there are waiting or active readers schedule readers
					select = READER;
				else {									// else schedule writers
					if (start_write.length() != 0)
						select = WRITER;
					else
						select = ANY;
				}
			}
			// initiates a write given no active readers, writers, readers aren't schedules, and system not paused
			[] void start_write(int id) st ((nw == 0) && (nr == 0) && (select != READER) && pause_check()) {
				nw++;
				forward activate(id);
			}
			// ends a write and schedules next entry
			[] void end_write(int id) {
				nw--;
				send removeUser(id);

				// schedules next entry to database
				if ( start_write.length() !=  0 )	// if there are waiting writers schedule a writer
					select = WRITER;
				else {								// else schedule a reader
					if (start_read.length() != 0)
						select = READER;
					else
						select = ANY;
				}
			}
		}
	}
}
