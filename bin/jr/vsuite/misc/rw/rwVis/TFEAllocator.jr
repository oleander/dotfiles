/* Threshold Fastest Emptying:  Process readers until the number of writers *
 * passes a threshold then processes writer                                 */

public class TFEAllocator extends Allocator {
	private static final int ANY = 2;
	private int select = ANY;
	private int K = 5;					// threshold for writers

	private op void kill_threshold ();	// kill threshold process
	private op boolean end_check ();	// checks and modifiers for threshold process
	private op boolean start_check ();
	public op void setThreshold (int);

	process allocate {
		receive begin();

		int nr = 0, nw = 0;		// active readers and writers

		while (true) {
			inni void kill() { call kill_threshold(); break; }		// kill allocator
			[] void pause () { setPaused(true); }					// pause and resume manager
			[] void resume () { setPaused(false); }
			// start a read given below the threshold and no active writers
			[] void start_read(int id) st ((nw == 0) && (select != WRITER) && start_check() && pause_check()) {
				nr++;
				forward activate(id);
				select = READER;
			}
			// end read and test for recheduling
			[] void end_read(int id) {
				nr--;
				send removeUser(id);

				if (end_check())
					select = WRITER;
				else if ( (nr + start_read.length() == 0) )
					select = ANY;
			}
			// start a write given no active users and writers above threshold
			[] void start_write(int id) st ((nw == 0) && (nr == 0) && (select != READER) && pause_check()) {
				nw++;
				forward activate(id);
				select = WRITER;
			}
			// end a write and test for recheduling
			[] void end_write(int id) {
				nw--;
				send removeUser(id);

				if (start_write.length() == 0)
					select = READER;
			}
		}
	}

	// modify and access the threshold variable
	process threshold {
		while (true) {
			inni void kill_threshold () { break; }
			[] void setThreshold (int K) {
				this.K = K;
			}
			[] boolean start_check () st setThreshold.length() == 0 {
				return (start_write.length() < K);
			}
			[] boolean end_check () st setThreshold.length() == 0 {
				return (start_write.length() >= K);
			}
		}
	}
}
