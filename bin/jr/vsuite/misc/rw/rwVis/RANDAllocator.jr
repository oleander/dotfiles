/* Random Allocator : randomly schedules readers and a writer */

import java.util.Random;

public class RANDAllocator extends Allocator {
	private static final int ANY = 2;
	private int select = ANY;		// selection vairable
	int nr = 0, nw = 0, qr = 0;		// active readers and writers and scheduled readers

	process allocate {
		receive begin();

		Random rand = new Random();	// random number generator

		while (true) {
			inni void kill() { break; }				// kill allocator
			[] void pause () { setPaused(true); }	// pause and resume the manager
			[] void resume () { setPaused(false); }	
			// start a read given checks
			[] void start_read(int id) st ((nw == 0) && (select != WRITER) && (checkReaders()) && pause_check()){
				nr++;
				forward activate(id);

				// decrement scheduled readers
				if(select == READER)
					qr--;
			}
			// end a read and randomly reschedule
			[] void end_read(int id) {
				nr--;
				send removeUser(id);

				// reschedule by randomly picking between a reader and a writer
				if ( (start_write.length() != 0) && (qr == 0) && (start_write.length() != 0)) {
					select = rand.nextInt(2);
					qr = start_read.length();
				}
				else if (qr == 0) {
					select = ANY;
				}
			}
			// start a write given checks
			[] void start_write(int id) st ((nw == 0) && (nr == 0) && (select != READER) && pause_check()) {
				nw++;
				forward activate(id);
			}
			// end a read and reschedule
			[] void end_write(int id) {
				nw--;
				send removeUser(id);

				// reschedule by randomly picking between a reader and a writer
				if ( (start_read.length() != 0) && (start_write.length() != 0) ) {
					select = rand.nextInt(2);
					qr = start_read.length();
				}
				else
					select = ANY;
			}
		}
	}

	// check or more queued readers
	private boolean checkReaders () {
		if(select == READER)
			return (qr != 0);
		else
			return true;
	}
}
