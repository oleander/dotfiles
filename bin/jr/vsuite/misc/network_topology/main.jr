//  distributed topology computation -- probe method
//
//  usage ... < datafile
//
//  datafile lists number of nodes, then pairs of neighbors, as integers

import edu.ucdavis.jr.JR;
import java.io.*;

public class main
{

    public static void main(String [] args)
    {

////     get file name and start node

    // read number of nodes and initial topology
    int n = -9999; // initialize to keep Java quiet
    int initial_top[][] = null; // initialize to keep Java quiet
    // a remnant in converting from SR to JR (and algorithm description),
    // nodes are numbered 1 ... n; 0-th elements of initial_top are unused.
    // also note that the code uses node number 0 to mean no
    // connection between nodes.    
    // (that would need to be changed to, say, -1, although it should
    //  have been a defined constant in the first place).
        try {
            GetIn gin = new GetIn();
            n = gin.readInt();
            initial_top = new int[n+1][n+1];
            System.out.println("above loop: "+n);
            while(true) {
                    Int2 i2 = gin.readInt2();
                int i,j;
                i = i2.i; j = i2.j;
                System.out.println("in loop: "+i2.i +" "+i2.j);
                if (i<1 || i>n || j<1 || j>n) {
                    System.err.println(
                        "Error:  each node must be between 1 and n");
                    JR.exit(1);
                }
                initial_top[i][j] = j; initial_top[j][i] = i;

            }

        } catch (Exception e) {                System.out.println("catcher: ");}

        System.out.println("after read in loop: "+n);

        print(initial_top);

        remote node nc[] = new remote node[n+1]; // again 0 is unused

        System.out.println("before try");
            for( int i = 1; i <= n; i++ ) {
                nc[i] = new remote node(n,i);
            }
            for( int i = 1; i <= n; i++ ) {
                call nc[i].neighbors(nc,initial_top[i]); // pass only slice
            }

            int final_top[][] = null; // initialize to keep Java quiet
	    // assumes that 1 is starting node (again, 0 is not used)
            final_top = nc[1].initiate();
            System.out.println("at end");
            print(final_top);

            JR.exit(0);
    }


    public static void print(int top[][]) {
        int n = top.length-1; // -1 due to dummy 0 elements
        System.out.println(
               "    Topology shown as "+n+" x "+n+" adjacency matrix");
        for( int i = 1; i <= n; i++ ) {
            System.out.print(i+":  ");
            for( int j = 1; j <= n; j++ ) {
                System.out.print(top[i][j]+" ");
            }
            System.out.println("");
        }
        System.out.println("");
    }

}
