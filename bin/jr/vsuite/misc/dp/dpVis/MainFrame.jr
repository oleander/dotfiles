/*
 * Created on 2004/7/31
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */

/**
 * @author William
 * 
 * TODO To change the template for this generated type comment go to Window -
 * Preferences - Java - Code Style - Code Templates
 */

import edu.ucdavis.jr.JR;
import java.awt.event.*;
import java.awt.Color;
import java.awt.Image;
import java.util.LinkedList;
import javax.swing.*;
import java.io.*;
import java.net.*;


public class MainFrame extends JFrame implements ActionListener {

	public static void main(String[] args) {
		thisFrame = new MainFrame(TITLE);
		for ( int i = 0 ; i < args.length; i++ )
		{
			try
			{
				InetAddress.getAllByName(args[i]);
				if ( vmHostName.size() <= VM_LIMIT )
				{
					vmHostName.add(args[i]);
				}
				else
				{
					JOptionPane.showMessageDialog(thisFrame, "Maximum number of virtual machines reach", "Exception", JOptionPane.ERROR_MESSAGE);
				}
			}
			catch ( UnknownHostException uhe )
			{
				JOptionPane.showMessageDialog(thisFrame, "Unknown Host or incorrect IP format : " + args[i], "Incorrect Input", JOptionPane.ERROR_MESSAGE);
			}
		}
	}

	public MainFrame(String title) {
		super(title);
		setTitle(TITLE + " -- " + solution.toString() + " with " + numPhil + " philosophers with " + numSession + " sessions");

		initialMenuBar();
		initialPane();

		setSize(DiningEnvironmentConstant.FRAME_WIDTH, DiningEnvironmentConstant.FRAME_HEIGHT);
		setResizable(false);
		setLocation(100,100);
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				//System.exit(0);
				dispose();
				JR.exit(0);
			}
		});
		setVisible(true);
		
		vmHostName.add("localhost"); // default
	}

	private void initialMenuBar() {
		// File Menu
		// -- start
		// -- pause
		// -- exit
		fileStartItem = new JMenuItem("Start");
		fileStartItem.setAccelerator(KeyStroke.getKeyStroke('S', InputEvent.CTRL_MASK));
		fileStartItem.setToolTipText("start simulation");
		fileStartItem.setEnabled(true);
		fileStartItem.addActionListener(this);

		
		filePauseItem = new JMenuItem("Pause");
		filePauseItem.setAccelerator(KeyStroke.getKeyStroke('P', InputEvent.CTRL_MASK));
		filePauseItem.setToolTipText("pause simulation");
		filePauseItem.addActionListener(this);
		filePauseItem.setEnabled(false);
		
		fileResumeItem = new JMenuItem("Resume");
		fileResumeItem.setAccelerator(KeyStroke.getKeyStroke('R', InputEvent.CTRL_MASK));
		fileResumeItem.setToolTipText("resume simulation");
		fileResumeItem.addActionListener(this);
		fileResumeItem.setEnabled(false);
		
		fileStopItem = new JMenuItem("Stop");
		fileStopItem.setAccelerator(KeyStroke.getKeyStroke('T', InputEvent.CTRL_MASK));
		fileStopItem.setToolTipText("stop simulation");
		fileStopItem.addActionListener(this);
		fileStopItem.setEnabled(false);
				
		fileExitItem = new JMenuItem("Exit");
		fileExitItem.setAccelerator(KeyStroke.getKeyStroke('X', InputEvent.ALT_MASK));
		fileExitItem.setToolTipText("exit program");
		fileExitItem.addActionListener(this);

		fileMenu = new JMenu("File");
		fileMenu.setMnemonic(KeyEvent.VK_F);
		fileMenu.add(fileStartItem);
		fileMenu.add(filePauseItem);
		fileMenu.add(fileResumeItem);
		fileMenu.add(fileStopItem);
		fileMenu.add(new JSeparator());
		fileMenu.add(fileExitItem);

		// Setting Menu
		// -- method
		// -- number
		// -- session
		// -- time constant
		// -- display
		settingMethodItem = new JMenuItem("method");
		settingMethodItem.setAccelerator(KeyStroke.getKeyStroke('M',
				InputEvent.CTRL_MASK));
		settingMethodItem.setToolTipText("choose a method to demostrate the dining philosopher problem");
		settingMethodItem.addActionListener(this);

		settingNumberItem = new JMenuItem("number");
		settingNumberItem.setAccelerator(KeyStroke.getKeyStroke('N',
				InputEvent.CTRL_MASK));
		settingNumberItem.setToolTipText("set the number of philosophers in the room");
		settingNumberItem.addActionListener(this);

		settingSessionItem = new JMenuItem("sessions");
		settingSessionItem.setAccelerator(KeyStroke.getKeyStroke('E',
				InputEvent.CTRL_MASK));
		settingSessionItem.setToolTipText("set the number of session each philosopher runs automatically");
		settingSessionItem.addActionListener(this);

		settingTimeConstantItem = new JMenuItem("time constant");
		settingTimeConstantItem.setToolTipText("set the longest time each philosopher thinks");
		settingTimeConstantItem.addActionListener(this);

		settingDisplayThemeItem = new JMenuItem("display theme");
		settingDisplayThemeItem.setToolTipText("set the display icons");
		settingDisplayThemeItem.addActionListener(this);


		settingMenu = new JMenu("Setting");
   	settingMenu.setMnemonic(KeyEvent.VK_S);
		settingMenu.add(settingMethodItem);
		settingMenu.add(settingNumberItem);
		settingMenu.add(settingSessionItem);
		settingMenu.add(settingTimeConstantItem);
		settingMenu.add(settingDisplayThemeItem);

		// Option Menu
		// -- server only
		// -- server and clients
		optionServerOnlyItem = new JRadioButtonMenuItem("Server only", true);
		optionServerOnlyItem.setToolTipText("Simulate everything locally");
		optionServerOnlyItem.addActionListener(this);
		
		optionServerClientItem = new JRadioButtonMenuItem("Server and clients", false);
		optionServerClientItem.setToolTipText("Simulate and separate evenly on the vm");
		optionServerClientItem.addActionListener(this);
		
		ButtonGroup optionGroup = new ButtonGroup();
		optionGroup.add(optionServerOnlyItem);
		optionGroup.add(optionServerClientItem);
		
		optionMenu = new JMenu("Option");
		optionMenu.setMnemonic(KeyEvent.VK_O);
		optionMenu.add(optionServerOnlyItem);
		optionMenu.add(optionServerClientItem);

		// Vm Menu
		// -- add
		// -- remove
		// -- show
		vmAddItem = new JMenuItem("Add a VM");
		vmAddItem.setToolTipText("add a vm host location");
		vmAddItem.addActionListener(this);

		vmRemoveItem = new JMenuItem("Remove a VM");
		vmRemoveItem.setToolTipText("remove a vm host location from list");
		vmRemoveItem.addActionListener(this);
		
		vmShowItem = new JMenuItem("Show VM List");
		vmShowItem.setToolTipText("display the current vm host list");
		vmShowItem.addActionListener(this);
		
		vmMenu = new JMenu("VM host");
		vmMenu.setMnemonic(KeyEvent.VK_V);
		vmMenu.add(vmAddItem);
		vmMenu.add(vmRemoveItem);
		vmMenu.add(vmShowItem);

		// MenuBar
		menuBar = new JMenuBar();
		menuBar.add(fileMenu);
		menuBar.add(settingMenu);
		menuBar.add(optionMenu);
		menuBar.add(vmMenu);

	}

	private void initialPane() {
		displayPanel = new DiningDesktopPane(DiningEnvironmentConstant.FRAME_WIDTH, DiningEnvironmentConstant.FRAME_HEIGHT, DiningEnvironmentConstant.FRAME_BACKGROUND_COLOR, theme, false);
		displayPanel.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
		setContentPane(displayPanel);
		setJMenuBar(menuBar);
	}

	public void actionPerformed(ActionEvent e) {
		JMenuItem item = (JMenuItem) e.getSource();
		
		if (item == fileStartItem) 
		{
			fileStartItem.setEnabled(false);
			call solution.setNumber(numPhil, numSession);
			send solution.start(displayPanel, !clientMode, vmHostName);
			//setTitle(TITLE + " -- " + solution.toString() + " with " + numPhil + " philosophers with " + numSession + " sessions");
			displayPanel.setMessage("");
			filePauseItem.setEnabled(true);
			fileResumeItem.setEnabled(false);
			fileStopItem.setEnabled(true);
			return;
		}
		
		if ( item == filePauseItem )
		{
			filePauseItem.setEnabled(false);
			call solution.pause();
			//setTitle(TITLE + " -- " + solution.toString() + " with " + numPhil + " philosophers with " + numSession + " sessions");
			displayPanel.setMessage("all philosophers are paused");
			fileStartItem.setEnabled(false);
			fileResumeItem.setEnabled(true);
			fileStopItem.setEnabled(true);
			return;
		}
		
		if ( item == fileResumeItem )
		{
			fileResumeItem.setEnabled(false);
			call solution.resume();
			//setTitle(TITLE + " -- " + solution.toString() + " with " + numPhil + " philosophers with " + numSession + " sessions");
			displayPanel.setMessage("");
			fileStartItem.setEnabled(false);
			filePauseItem.setEnabled(true);
			fileStopItem.setEnabled(true);
			return;
		}
				
		if ( item == fileStopItem )
		{
			fileStopItem.setEnabled(false);
			solution.destroy();
			send displayPanel.removeAllOp();
			//setTitle(TITLE + " -- " + solution.toString() + " with " + numPhil + " philosophers with " + numSession + " sessions");
			displayPanel.setMessage("all philosophers are stopped");
			fileStartItem.setEnabled(true);
			filePauseItem.setEnabled(false);
			fileResumeItem.setEnabled(false);
			return;
		}		
			
		if (item == fileExitItem) {
			//System.exit(0);
			dispose();
			JR.exit(0);
			return;
		}

		if (item == settingMethodItem) {
			boolean validInput = false;
			Object ret = JOptionPane.showInputDialog(this,
						"Select one of the following", "Method Selection",
						JOptionPane.QUESTION_MESSAGE, null, methodChoice,
						solution);
			if (ret != null) {
				validInput = true;
			}

			if ( validInput )
			{
				solution.destroy();
				solution = (DiningPhilSolution)ret;
				send displayPanel.removeAllOp();
			   //send displayPanel.repaintOp();
				
				fileStartItem.setEnabled(true);
				filePauseItem.setEnabled(false);
				fileResumeItem.setEnabled(false);
				fileStopItem.setEnabled(false);
			
				setTitle(TITLE + " -- " + solution.toString() + " with " + numPhil + " philosophers with " + numSession + " sessions");
			}
			return;
		}

		if (item == settingNumberItem) 
		{
			boolean validInput = false;
			while (!validInput) 
			{
				try {
					Object ret = JOptionPane.showInputDialog(
							this, "Currently the number of Philosophers is " + numPhil + "\nEnter a new number of philosophers:",
							"Enter number of philosophers:",
							JOptionPane.QUESTION_MESSAGE);
					if ( ret == null )
					{
						break;
					}
					else 
					{
						numPhil = Integer.parseInt((String)ret);
						if ( numPhil < 3 )
						{
							throw new NumberFormatException();
						}
						validInput = true;
					}
				} catch (NumberFormatException ex) {
					JOptionPane.showMessageDialog(this,
							"Invalid Input : Enter a positive integer greater than or equal to 3 only");
					validInput = false;
				} catch ( Exception ex )
				{	
					JOptionPane.showMessageDialog(this,
						"Invalid Input : please contact yauyeung@ucdavis.edu and tell me what you have entered!");
					validInput = false;
				}
			}
			if ( validInput )
			{
				setTitle(TITLE + " -- " + solution.toString() + " with " + numPhil + " philosophers with " + numSession + " sessions");
				solution.destroy();
				send displayPanel.removeAllOp();
				fileStartItem.setEnabled(true);
				filePauseItem.setEnabled(false);
				fileResumeItem.setEnabled(false);
				fileStopItem.setEnabled(false);
			}
			return;
		}
		
		if (item == settingSessionItem) 
		{
			boolean validInput = false;
			while (!validInput) 
			{
				try {
					Object ret = JOptionPane.showInputDialog(
							this, "Currently # of sessions = " + numSession +"\nEnter a new number of session each \nphilosopher will run automatically:",
							"Enter number of session:",
							JOptionPane.QUESTION_MESSAGE);
					if ( ret == null )
					{
						break;
					}
					else 
					{
						numSession = Integer.parseInt((String)ret);
						if ( numSession < 1 )
						{
							throw new NumberFormatException();
						}
						validInput = true;
					}
				} catch (NumberFormatException ex) {
					JOptionPane.showMessageDialog(this,
							"Invalid Input : Enter an integer greater than 0 only");
					validInput = false;
				} catch ( Exception ex )
				{	
					JOptionPane.showMessageDialog(this,
						"Invalid Input : please contact yauyeung@ucdavis.edu and tell me what you have entered!");
					validInput = false;
				}
			}
			if ( validInput )
			{
				setTitle(TITLE + " -- " + solution.toString() + " with " + numPhil + " philosophers with " + numSession + " sessions");
				solution.destroy();
				send displayPanel.removeAllOp();
				fileStartItem.setEnabled(true);
				filePauseItem.setEnabled(false);
				fileResumeItem.setEnabled(false);
				fileStopItem.setEnabled(false);
			}
			return;
		}

		if (item == settingTimeConstantItem) 
		{
			boolean validInput = false;
			try 
			{
				Object ret = JOptionPane.showInputDialog(
						this, "Enter a positive Integer for the time constant (seconds)\nCurrent Setting:\ntime constant = " + timeConstant + "\nthe max slowest thinking time : " + ( timeConstant * 10 ) + " seconds\nthe max fastest thinking time : " + timeConstant + " seconds" + "\n* reminder : use the slider outside to adjust the\n  ratio to achieve the slowest or fastest thinking time",
						"Enter an Integer:",
						JOptionPane.QUESTION_MESSAGE);
				if ( ret == null )
				{
					return;
				}
				else 
				{
					timeConstant = Integer.parseInt((String)ret);
					if ( timeConstant <= 0 || timeConstant > 3600 )
					{
						timeConstant = 10; // default
						throw new NumberFormatException();
					}
					validInput = true;
				}
			} catch (NumberFormatException ex) {
				JOptionPane.showMessageDialog(this,
						"Invalid Input : Enter a positive non-zero time smaller than 1 hour only");
				validInput = false;
			} catch ( Exception ex )
			{
				JOptionPane.showMessageDialog(this,
						"Invalid Input : please contact yauyeung@ucdavis.edu and tell me what you have entered!");
				validInput = false;
			}

			if ( validInput )
			{
				displayPanel.changeTimeConstant(timeConstant);
			}
			return;
		}
		
		if ( item == settingDisplayThemeItem )
		{
			Object ret = JOptionPane.showInputDialog(this, "Choose a theme to display philosopher's image: ",
							"Choose a Theme", JOptionPane.QUESTION_MESSAGE, null, themeSelect, themeSelect[0]);
			if ( ret != null )
			{
				theme = ((ThemeSelection)ret).getValue();
				send displayPanel.setTheme(theme);
				solution.destroy();
				send displayPanel.removeAllOp();
				fileStartItem.setEnabled(true);
				filePauseItem.setEnabled(false);
				fileResumeItem.setEnabled(false);
				fileStopItem.setEnabled(false);
				send displayPanel.setMessage("Theme changes to " + ((ThemeSelection)ret).toString());
				return ;
			}
		}

		if ( item == optionServerOnlyItem )
		{
			if ( clientMode )
			{
				solution.destroy();
				send displayPanel.removeAllOp();
				fileStartItem.setEnabled(true);
				filePauseItem.setEnabled(false);
				fileResumeItem.setEnabled(false);
				fileStopItem.setEnabled(false);
				clientMode = false;				
				System.out.println("Switch into server only mode");
				// destroyVm(); no such feature in JR yet
			}
			return;
			
		}
		
		if ( item == optionServerClientItem )
		{
			if ( ! clientMode )
			{
				solution.destroy();
				send displayPanel.removeAllOp();
				fileStartItem.setEnabled(true);
				filePauseItem.setEnabled(false);
				fileResumeItem.setEnabled(false);
				fileStopItem.setEnabled(false);
				clientMode = true;
				System.out.println("Switch into server-clients mode");
				send initialVm();
			}
			return;
		}
		
		if ( item == vmAddItem )
		{
			Object ret = JOptionPane.showInputDialog(this, "Add a host address\nExample: \"localhost\" or \"192.168.0.2\"",
							"Add a VM host address", JOptionPane.QUESTION_MESSAGE);
			if ( ret != null )
			{
				try
				{
					InetAddress.getAllByName((String)ret);
				}
				catch ( UnknownHostException uhe )
				{
					JOptionPane.showMessageDialog(this, "Unknown Host or incorrect IP format", "Incorrect Input", JOptionPane.ERROR_MESSAGE);
					return;
				}
			
			
				if ( vmHostName.size() <= VM_LIMIT )
				{
					vmHostName.add((String)ret);
					optionServerClientItem.setEnabled(true);
					vmRemoveItem.setEnabled(true);
				}
				else
				{
					JOptionPane.showMessageDialog(this, "Maximum number of virtual machines reach", "Exception", JOptionPane.ERROR_MESSAGE);
					return;
				}
			}
		}
		
		if ( item == vmRemoveItem )
		{
			Object ret = JOptionPane.showInputDialog(this, "Remove a host address from list: ",
							"Remove a VM host address", JOptionPane.QUESTION_MESSAGE, null, vmHostName.toArray(), vmHostName.get(0));
			if ( ret != null )
			{
				vmHostName.remove((String)ret);
				if ( vmHostName.size() == 0 )
				{
					optionServerClientItem.setEnabled(false);
					vmRemoveItem.setEnabled(false);
				}
			}
			return;
		}
		
		if ( item == vmShowItem )
		{
			JTextArea display = new JTextArea();
			display.setEditable(false);
			for ( int i = 0 ; i < vmHostName.size(); i++ )
			{
				display.append(vmHostName.get(i).toString() + "\n");
			}
		
			JDialog showVMDialog = new JDialog(this, "List of Virtual Machine");
			showVMDialog.setSize(300,300);
			showVMDialog.setLocationRelativeTo(this);
			showVMDialog.getContentPane().add(new JScrollPane(display));
			showVMDialog.setVisible(true);
			
			return;
		}

	}
	
	public static int getNumPhil()
	{
		return numPhil;
	}
	
	public static int getCurrentWidth()
	{
		return thisFrame.getWidth();
	}
	
	public static int getCurrentHeight()
	{
		return thisFrame.getHeight();
	}
	
	private process serverClient
	{
		int vmRequestIndex = -1;
		while ( true )
		{
			inni void initialVm()
			{
				int s = vmHostName.size();
				System.out.println("initial vm ... ");
				displayPanel.setMessage("Please wait while initializing all the vm...");

				// make it to co statement later
				for ( int i = 0; i < s; i++ )
				{
					try
					{
						vmArray[i] = new vm() on (String)vmHostName.get(i);
						System.out.println("vm created at : " + (String)vmHostName.get(i));
						displayPanel.setMessage("Please wait while initializing all the vm..." + "initializing vm[" + i + "] at " + vmHostName.get(i).toString());
						for ( int k = 0 ; k < DiningEnvironmentConstant.ICON_FILENAME.length; k++)
						{
							for ( int j = 0 ; j < DiningEnvironmentConstant.ICON_FILENAME[k].length; j++)
							{
								displayPanel.setMessage("Please wait while initializing all the vm..." + "vm[" + i + "] at " + vmHostName.get(i).toString() + ": " + DiningEnvironmentConstant.ICON_FILENAME[k][j] + " is sending");
								sendVmFile(DiningEnvironmentConstant.ICON_FILENAME[k][j], vmArray[i]);
								displayPanel.setMessage("Please wait while initializing all the vm..." + "vm[" + i + "] at " + vmHostName.get(i).toString() + ": " + DiningEnvironmentConstant.ICON_FILENAME[k][j] + " is sent");
							}
						}
						displayPanel.setMessage("Please wait while initializing all the vm..." + "vm[" + i + "] at " + vmHostName.get(i).toString() + " is initialized");
					} catch ( Exception vmException ) { vmException.printStackTrace(); }
				}
				System.out.println("all client vm(s) are initialized");
				displayPanel.setMessage("");
			}
			[] vm retrieveVm()
			{
				vmRequestIndex = ( vmRequestIndex + 1 ) % vmHostName.size();
				return vmArray[vmRequestIndex];
			}
			[] vm retrieveVm(int i)
			{
				vmRequestIndex = i % vmHostName.size();
				return vmArray[vmRequestIndex];
			}
			[] boolean isClientOn()
			{
				return clientMode;
			}
	
		}
	}
	
	private static void sendVmFile(String fileName, vm thisVm)
	{
		try
		{
			BufferedInputStream in = new BufferedInputStream(new FileInputStream(fileName));
			remote RemoteBufferedOutputStream out = new remote RemoteBufferedOutputStream(fileName) on thisVm;
			System.out.println(fileName + " is being sent");
			while ( in.available() > 0 )
			{
				int temp = in.read();
				call out.writeOp(temp);
			}
			in.close();
			call out.closeOp();
			System.out.println(fileName + " is sent"); 
		} catch ( Exception e )
		{
			System.err.println("error in sending file to vm!");
			e.printStackTrace();
			JR.exit(0);
		}
	}

	private static op void clientAction(int);
	private static op void turnOnClient();
	private static op void turnOffClient();
	public static op void initialVm();
	public static op vm retrieveVm();
	public static op vm retrieveVm(int);
	public static op boolean isClientOn();
	
	private static MainFrame thisFrame;

	private DiningDesktopPane displayPanel;
	private JMenuBar menuBar;
	private JMenu fileMenu, settingMenu, optionMenu, vmMenu;
	private JMenuItem fileStartItem, filePauseItem, fileResumeItem, fileStopItem, fileExitItem;
	private JMenuItem settingMethodItem, settingNumberItem, settingSessionItem, settingTimeConstantItem, settingDisplayThemeItem;
	private JRadioButtonMenuItem optionServerOnlyItem, optionServerClientItem;
	private JMenuItem vmAddItem, vmRemoveItem, vmShowItem;

	private static final String TITLE = "Dining Room";
	public static JLabel table = new JLabel(new ImageIcon("littleTable.jpg"));

	private static final Object[] methodChoice = { CentralizedSolution.instance(), DistributedSolution.instance(), DecentralizedSolution.instance() };
	private static DiningPhilSolution solution = DistributedSolution.instance();
	private static int numPhil = DiningEnvironmentConstant.BEGIN_NUMBER_PHIL, numSession = 4, timeConstant = 10;
	private static int theme = 0;
	private static boolean clientMode = false;

	private static final int VM_LIMIT = 100;
	private static LinkedList vmHostName = new LinkedList();
	private static vm [] vmArray = new vm[VM_LIMIT];
	private static cap void (int) [] clientWindowRemoteControl;
	
	private static final ThemeSelection [] themeSelect = { new ThemeSelection("Java Duke", 0), new ThemeSelection("Buddy Bean", 1) };

}

class ThemeSelection
{
	String themeName;
	int value;
	
	public ThemeSelection(String name, int i)
	{
		this.themeName = name;
		this.value = i;
	}
	
	public String toString()
	{
		return themeName;
	}
	
	public int getValue()
	{
		return value;
	}
}
