import javax.swing.JComponent;

public class CentralizedPhilosopher extends DiningPhilPhilosopher {

	public CentralizedPhilosopher(remote CentralizedServant s, int id, int numPhil, int session, remote DiningDesktopPane container, cap void (cap void (int)) controller, boolean localOnly) 
	{
	 	super(id, numPhil, session, container, controller, localOnly);
		this.s = s; 
	}


	private process phil 
	{
		beginProcess();
		for (int i = 1; ( i <= session || isManualControl ) && (! done) ; i++) 
		{
			checkPause();
			checkManualEat();
			if ( done ) break; 
		 	
			send updateImage(DiningEnvironmentConstant.STATE_HUNGRY);
			
			call s.getforks(id);
			send updateImage(DiningEnvironmentConstant.STATE_EAT);

			checkPause();
			if ( done ) { send s.relforks(id); break; }
			
			checkThreadSleep(2.0, "eating");
	
			checkPause();
			checkManualThink();
			if ( done ) { call s.relforks(id); break; }

			call s.relforks(id);
			send updateImage(DiningEnvironmentConstant.STATE_THINK);
			
			checkPause();
			if ( done ) break; 
			
			checkThreadSleep(1.0, "thinking");
		}
		endProcess();
	}

	remote CentralizedServant s;

}
