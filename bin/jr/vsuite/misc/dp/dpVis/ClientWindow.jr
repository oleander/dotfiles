import javax.swing.JFrame;
/*
 * Created on 2004/8/2
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */

/**
 * @author ¤p¥ò
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
import javax.swing.*; 
import java.awt.event.*;


public class ClientWindow extends JFrame implements ActionListener 
{
	public ClientWindow(String title, PhilImage philosopher, DiningPhilPhilosopher phil, int theme)
	{
		super(title);
		philObject = phil;
		displayPanel = new DiningDesktopPane(200,200, DiningEnvironmentConstant.FRAME_BACKGROUND_COLOR, theme, true);
		displayPanel.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
		
	   setupMenuBar();

		setContentPane(displayPanel);		
	   setJMenuBar(menuBar);
		startUp_y += 20;
		startUp_x += 20;
		setLocation(startUp_x % 100, startUp_y % 400);
		setSize(DiningEnvironmentConstant.CLIENT_FRAME_WIDTH,DiningEnvironmentConstant.CLIENT_FRAME_HEIGHT);
		setVisible(true);
		addWindowListener(new ClientWindowAdapter());
		
		displayPanel.add(philosopher);
	}
	
	private void setupMenuBar()
	{
		// Control Menu
		// -- Manual
		// -- Auto
		// -- Exit
		controlManualItem = new JRadioButtonMenuItem("Manual", false);
		controlManualItem.setToolTipText("manually control the action of philosopher");
		controlManualItem.addActionListener(this);
		
		controlAutoItem = new JRadioButtonMenuItem("Auto", true);
		controlAutoItem.setToolTipText("automatically control the action of philosopher");
		controlAutoItem.addActionListener(this);
		
		ButtonGroup controlGroup = new ButtonGroup();
		controlGroup.add(controlManualItem);
		controlGroup.add(controlAutoItem);

		controlExitItem = new JMenuItem("Exit");
		controlExitItem.setAccelerator(KeyStroke.getKeyStroke('X', InputEvent.ALT_MASK));
		controlExitItem.addActionListener(this);
		
		controlMenu = new JMenu("Control");
		controlMenu.setMnemonic(KeyEvent.VK_C);
		controlMenu.add(controlManualItem);
		controlMenu.add(controlAutoItem);
		controlMenu.add(new JSeparator());
		controlMenu.add(controlExitItem);
	
		// action
		// -- Hungry
		// -- Thinking
		// -- Done
		
		actionHungryItem = new JMenuItem("Hungry");
		actionHungryItem.setAccelerator(KeyStroke.getKeyStroke('H', InputEvent.CTRL_MASK));
		actionHungryItem.addActionListener(this);
		actionHungryItem.setEnabled(false);
		
		actionThinkingItem = new JMenuItem("Thinking");
		actionThinkingItem.setAccelerator(KeyStroke.getKeyStroke('T', InputEvent.CTRL_MASK));
		actionThinkingItem.addActionListener(this);
		actionThinkingItem.setEnabled(false);
				
		actionDoneItem = new JMenuItem("Done");
		actionDoneItem.setAccelerator(KeyStroke.getKeyStroke('D', InputEvent.CTRL_MASK));
		actionDoneItem.addActionListener(this);
		actionDoneItem.setEnabled(false);
		
		actionMenu = new JMenu("Action");
		actionMenu.setEnabled(false);
		actionMenu.setMnemonic(KeyEvent.VK_A);
		actionMenu.add(actionHungryItem);
		actionMenu.add(actionThinkingItem);
		actionMenu.add(actionDoneItem);
		
		// MenuBar
		menuBar = new JMenuBar();
		menuBar.add(controlMenu);
		menuBar.add(actionMenu);
	}
	
	
	public void receiver(cap void (int) mainFrameController)
	{
		remoteControl = mainFrameController;
	}
	
	public void actionPerformed(ActionEvent e) 
	{
		JMenuItem item = (JMenuItem) e.getSource();
		if (item == controlManualItem)
		{
			send philObject.setManualControl(true);
			actionMenu.setEnabled(true);
			actionDoneItem.setEnabled(true);
			return;
		}
		if (item == controlAutoItem)
		{
			send philObject.setManualControl(false);
			actionDoneItem.setEnabled(false);
			actionMenu.setEnabled(false);
			return;
		} 
		if (item == actionHungryItem)
		{
			call philObject.remoteControl(DiningEnvironmentConstant.STATE_HUNGRY);
			return;
		}
		if (item == actionThinkingItem)
		{
			call philObject.remoteControl(DiningEnvironmentConstant.STATE_THINK);
			return;
		}
		if (item == actionDoneItem)
		{
			send philObject.remoteControl(DiningEnvironmentConstant.STATE_DONE);
			actionMenu.setEnabled(false);
			controlManualItem.setEnabled(false);
			controlAutoItem.setEnabled(false);
			return;
		}
		if (item == controlExitItem)
		{
			send philObject.remoteControl(DiningEnvironmentConstant.STATE_DONE);
			this.dispose();
			return;
		}
	}	
	
	public op void addImageOp(JComponent comp)
	{
		displayPanel.add(comp);
	}
	
	public op void setCanEat(boolean b)
	{
		actionHungryItem.setEnabled(b);
	}
	
	public op void setCanThink(boolean b)
	{
		actionThinkingItem.setEnabled(b);
	}
	
	public op void setMessage(String s)
	{
		send displayPanel.setMessage(s);
	}
	
	private cap void (int) remoteControl;
	
	private DiningDesktopPane displayPanel;
	private JMenuBar menuBar;
	private JMenu controlMenu, actionMenu;
	private JRadioButtonMenuItem controlManualItem, controlAutoItem;
	private JMenuItem controlExitItem;
	private JMenuItem actionHungryItem, actionThinkingItem, actionDoneItem;

	private static int startUp_x = 0, startUp_y = 0;

	// this object does not have to be remote, 
	// because the phil and window are created in the same vm
	private DiningPhilPhilosopher philObject; 

	class ClientWindowAdapter extends WindowAdapter
	{
		public void windowClosing(WindowEvent e) {
			send philObject.remoteControl(DiningEnvironmentConstant.STATE_DONE);
			dispose();
		}
	}
}
