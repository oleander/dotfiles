import javax.swing.JComponent;

public class DecentralizedPhilosopher extends DiningPhilPhilosopher {

	public DecentralizedPhilosopher(remote DecentralizedServant s, int id, int numPhil, int session, remote DiningDesktopPane container, cap void (cap void (int)) controller, boolean localOnly) 
	{
		super(id, numPhil, session, container, controller, localOnly);
		this.s = s; 
	}
	
	private process phil 
	{
		beginProcess();

		for (int i = 1; ( i <= session || isManualControl ) && (! done) ; i++) 
		{
			checkPause();
			checkManualEat();
			if ( done ) break; 

			send updateImage(DiningEnvironmentConstant.STATE_HUNGRY); // hungry

			checkPause();
			if ( done ) break; 
			 
			call s.getforks();
			send updateImage(DiningEnvironmentConstant.STATE_EAT); // waiting -> eating
			
			checkPause();
			if ( done ) { send s.relforks(); break; } 
			checkThreadSleep(2.0, "eating");			
			
			checkPause();
			checkManualThink();
			if ( done ) { send s.relforks(); break; } 
				
			call s.relforks();
			send updateImage(DiningEnvironmentConstant.STATE_THINK); // thinking image
			
			checkPause();
			if ( done ) break;
			checkThreadSleep(1.0, "thinking");
		}
		endProcess();
	}

	remote DecentralizedServant s;

}
