import edu.ucdavis.jr.JR;

public class main
{

    private static op void done();

    public static void main(String [] args)
    {

        // default values, eventually read as args
        int n = 5; // number of philosophers
	int t = 3; // number of sessions per philosopher

	// create the Servants and Philosophers
        remote Servant s[] = new remote Servant[n];
        System.out.println("before try");
	    System.out.println("after jcap");
	    for( int i = 0; i < n; i++ ) {
                s[i] = new remote Servant(i);
// 2000-03-07 can't yet pass cap to constructor
//		new remote Philosopher(s[i], i, t);
        remote Philosopher p;

		p = new remote Philosopher(s[i], i, t, done);
		//call p.init(s[i]);
	    }

	// give each Servant capabilities for
	// its two neighboring Servants
        System.out.println("before start computation");
	    for( int i = 0; i < n; i++ ) {
	        int left = (i-1<0?n-1:i-1), right = (i+1>n-1?0:i+1);
                send s[i].links(s[left],s[right]);
	    }

	// initialize each Servant's forks;
	// ..........
        System.out.println("before start forks");
	    send s[0].forks(true, true, true, true);
	    for( int i = 0; i < n-1; i++ ) {
                send s[i].forks(false, false, true, false);
	    }
	    send s[n-1].forks(false, false, false, false);

        System.out.println("main after distributed forks");
	// wait for Philosophers to finish
	    for ( int i = 1; i <= n; i++ ) {
		receive done();
	    }
	    JR.exit(0);
    }
}
