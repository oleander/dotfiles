// see SR book pages 156-158 for comments ...

import edu.ucdavis.jr.JR;
import java.io.*;
import java.text.*;

class dsort {
   public op void print(int [] a);
   public op int[] sort(int[] a);
   public op cap void (int) worker(cap void (int,int) rep, int m);

   dsort() {
        int n;
        int[] nums;

         System.out.println("number of numbers?");

	 InputStreamReader isr = new InputStreamReader(System.in);
         BufferedReader br = new BufferedReader(isr);
         try {
         String s = br.readLine();
         n = Integer.parseInt(s);

	 nums = new int[n];
   
         for (int i = 0; i<n; i++) {
	    System.out.println("?");
            s = br.readLine();
            nums[i] = Integer.parseInt(s);
         }

	 int [] result;
	 System.out.println("before sorting\n");
	 call print(nums);
	 result = sort(nums);
	 System.out.println("after sorting\n");
	 call print(result);
	 JR.exit(0);
         } catch (Exception e) {e.printStackTrace(); n = 0;}
   }

   public void print(int[] a) {
      for (int i = 0; i<a.length; i++) {
         System.out.println(a[i]);
      }
   }

   public int[] sort(int[] a) {
         op void rep (int, int);
         int [] result;

         if (a.length>0){
            cap void (int) c;
	    c = worker(rep, a.length);
	    for (int i = 0; i<a.length; i++) {
               send c(a[i]);
            }
	    for (int i = 0; i < a.length; i++) {
               inni void rep(int pos, int value){
                  a[a.length - pos]=value;
               }
            }
         }
      return a;
   }

//        # worker receives n: the number of ints it is to receive.
//        # it keeps smallest, sends n-1 ints to the next worker.
//        # sends back its id (n) and smallest int after seeing all n ints.
   public cap void (int) worker (cap void (int,int) rep, int m) {
         cap void (int) c;
         int smallest;
         op void filter(int);
         c = filter;
	 reply c;
         receive filter(smallest);
         //   System.out.println("worker" + m + " smallest:" + smallest);
         if (m>1){
            cap void (int) next_worker;
            next_worker = worker(rep, m - 1);
	    for (int i = m - 1; i>=1; i--) {
               inni void filter(int candidate){
                     if (candidate < smallest){ // swap them
                        int tmp;
                        tmp = smallest;
                        smallest = candidate;
                        candidate = tmp;
                     }
                     send next_worker(candidate);
               }
            }
         }
         send rep(m, smallest);
      return null; // even though reply'ed above, need to make javac quiet
   }

}
