// comments from original psort.sr

// Build a binary tree of processes by reading input, then send down
// a message when ready to read the data back out.

// Originally written by Mike Coffin (see below), who found a bug in
// in input termination after a reply.  Along the way a problem with
// record construction was also uncovered.  Later we discovered that
// this is perhaps the only vsuite test that reads input from multiple
// SR processes (it found a MultiSR bug doing this).


// Date: Fri, 1 Nov 91
// From: Michael Coffin 
//
// ...I have a program that works correctly when an operation is sent to.
// But when I try a simple transformation: call the operation and have the
// operation immediately execute "reply" ... I get deadlock or core
// dumps.



// resource bsort reads integers from stdin until EOF is read,
// sorts them, and prints them out.

// It does so by creating a binary tree of processes.
// Each process has a pivot value and a left and right subtree that
// are each a process.  Values less than the pivot are passed down to
// the left; values greater are passed to the right.  Printing is done
// in the obvious way: first print the values in the left subtree, then
// the pivot, and then the right subtree.


import edu.ucdavis.jr.JR;
import java.io.*;
import java.text.*;

public class main
{
   static op pair sorter(int pivot);

   public static void main(String [] args)
   {
      int v;
      op void get(int x);
      pair root = null;

      int pending = 0;

      try {

         try {
            int n;
            InputStreamReader isr = new InputStreamReader(System.in);
            BufferedReader br = new BufferedReader(isr);

            String s = br.readLine();
            n = Integer.parseInt(s);
            root = sorter(n); pending++;

            while (true) { // EOF breaks this loop via exception
               s = br.readLine();
               n = Integer.parseInt(s);
               call root.store(n); pending++;
	    }
         }
	 catch (Exception e) {} // assume IOexception...

         call root.sendup(get);
 
      	 while(pending > 0) {
	   inni void get(int i) { System.out.println(i); pending--; }
	  
         }
      	 System.out.println("loop finished");
	
         JR.exit(0);
       }
       catch (Exception e) {}
    }

   static pair sorter(int pivot)
   {
      op void store(int x);
      op void sendup(cap void (int) x);
      op void get(int x);

      int lcnt = 0;
      int rcnt = 0;
      pair l,r,myops;

      myops = new pair(store, sendup); 

      try {
      	reply myops;

	l = myops; // remove warnings
	r = myops; 

	while(true) {
	  inni void store(int i) {
             try {
		   if (i < pivot) {
			if (0 == lcnt) { l = sorter(i); }
			else { call l.store(i); }
			lcnt++;
		   } else {
			if (0 == rcnt) { r = sorter(i); }
			else { call r.store(i); }
			rcnt++;
		   }
                } catch (Exception e) {e.printStackTrace();}
	     }
	  [] void sendup(cap void (int) ret) {
             try {
		   reply;
		   
		   if (lcnt > 0) {
			call l.sendup(get);
			while(lcnt > 0) {
			   inni void get(int i) {
                              try {
                                 call ret(i); lcnt--;
                              } catch (Exception e) {e.printStackTrace();}
                           }
			  
			}
		   }
		   call ret(pivot);
		
		   if (rcnt > 0) {
			call r.sendup(get);
			while(rcnt > 0) {
			   inni void get(int i) {
                              try {
                                 call ret(i); rcnt--;
                              } catch (Exception e) {e.printStackTrace();}
                           }
			  
			}
		   }
               } catch (Exception e) {e.printStackTrace();}

	    }
	 
	}
      }
      catch (Exception e) {}

      return myops;
   }

}
