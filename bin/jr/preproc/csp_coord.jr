

// at some point, remove commented out code from
// 2006-11-23 bug and workaround

import java.util.ArrayList;
import edu.ucdavis.jr.JR;

public class csp_coord {

    private int csp_np;
    private boolean csp_implicit;

    // interface to csp user code; first arg for each is pid
    // 2nd arg to csp_match is ArrayList of csp_rr's.
    public op void csp_match(int, ArrayList<csp_rr>);
    public op void csp_die(int);
    public op void csp_status(int, boolean);
    public op void csp_cantmatch(int, String);

    // csp_cantmatch is used only for implicit termination
    // when I/O stmt in user code can't match;
    // it's invoked via send;
    // csp_err sem is then used to block all of those processes
    // (before shutdown);
    // want to output errors for as many of them as possible.
    //
    // note that could handle this differently; here's 2 ideas.
    // (1)  have requests identify themselves as being in guard or stmt.
    //      if implicit and stmt and fail to match, the coordinator
    //	    could shutdown.
    // (2)  as in csp2sr, use semaphore to allow just one process
    //      to output message and then force program exit.
    public sem csp_err = 0; // just to block processes

    // hold requests that can't be immediately matched.
    // wanted:
    //   private ArrayList<csp_rr> [] defer;
    // but Java doesn't allow that (directly - and workarounds are uglier)
    // "generic array creation" error
    private ArrayList<ArrayList<csp_rr>> defer;

    // reply operation in csp user processes
    private cap void (boolean,int,int,int,int) [] csp_reply;

    // info on processes names and indexes.
    private csp_pidx [] csp_pidxs;
    private ArrayList<csp_pdecl> csp_pdecls;

    public csp_coord(int csp_np,
	             boolean csp_implicit,
		     cap void (boolean,int,int,int,int) [] csp_reply,
		     csp_pidx [] csp_pidxs,
		     ArrayList<csp_pdecl> csp_pdecls ) {
	this.csp_np = csp_np;
	this.csp_implicit = csp_implicit;
	this.csp_reply = csp_reply;
	this.csp_pidxs = csp_pidxs;
	this.csp_pdecls = csp_pdecls;

	// create with size csp_np, which doesn't increase.
	defer = new ArrayList<ArrayList<csp_rr>>(csp_np);
	for (int k = 0; k < csp_np; k++) {
	    defer.add(new ArrayList<csp_rr>());
	}

	formatInit();
    }

    /* coordinator terminates itself when no csp process is still active
     * so it isn't output as a "blocked process".
     */

    // simulate enum(ALIVE,BLOCKED,DEAD)
    // choose these numbers so that they aren't valid process ids
    // (just to be safe)
    // and so their negatives serve as indices into sstat array.
    private static final int ALIVE   = -1;
    private static final int BLOCKED = -2;
    private static final int DEAD    = -3;
    // keep these strings same length to make output pretty.
    private static final String [] sstat = {"**OOPS*",
                                            "ALIVE  ",
                                            "BLOCKED",
                                            "DEAD   "
    };

    // sending a reply to indicate I/O has failed:
    //   1st parameter (csp_ok) set to false
    //   3rd parameter csp_arm (i.e., arm number) set to 0
    //   the generated code uses both of these values, e.g.,
    //   in deciding when to exit a _do loop.
    //
    //   the rest of the numbers aren't used,
    //   just to be safe, though, pick a number
    //   that's not a valid process, arm, or quantifier number
    //   and that's not one of above numbers.
    private static final int BAD    = -4;

    private int [] status;
    private int active;

    private process csp_coordinator {
	status = new int [csp_np];
	for (int k = 0; k < csp_np; k++) {
	    status[k] = ALIVE;
	}
	active = csp_np;
	while (active > 0) {
	    inni void csp_match(int who, ArrayList<csp_rr> vrr)
		st csp_cantmatch.length() == 0 {
		    boolean some = true;
		    csp_rr rp;
		    // check for any self sends/receives.
		    for (int k = vrr.size()-1; k >= 0; k--) {
			csp_rr r = vrr.get(k);
			if (r.wwith == who) {
			    System.err.println("csp2jr: process with pid " +
		                who +
				" trying to " +
				(r.io?"receive from":"send to") +
				" itself; shutting down.");
			    print_status(true);
			    JR.exit(1);
			}
		    }
		    // throw out requests
		    // for processes that have died.
		    if (csp_implicit) {
			// don't use for-each since removing.
		        // for (csp_rr r : vrr)
		        for (int k = vrr.size()-1; k >= 0; k--) {
			    csp_rr r = (csp_rr) vrr.get(k);
			    if (status[r.wwith] == DEAD) {
			        vrr.remove(k);
			    }
			}
			if (vrr.size() == 0) {
			    send csp_reply[who](false,BAD,0,BAD,BAD);
			    some = false;
			}
		    }
		    if (some) {
		        boolean matched = false;
		        for (csp_rr r : vrr ) {
			    int other = r.wwith;
			    if (status[other] == BLOCKED) {
// 2006-11-23 workaround bug
//			        if (((ArrayList)defer.get(other)).size() == 0) {
			        if (defer.get(other).size() == 0) {
				    System.err.println(
				        "csp_coord (internal error) "+
					"empty defer");
				        JR.exit(1);
				}
				// look for match
// 2006-11-23 workaround bug -- later replace with "for each" loop
//				for (int h = 0; h < defer.get(other).size(); h++) {
//				    csp_rr s = (csp_rr)
//					defer.get(other).get(h);

//				for (int h = 0;
//				     h < ((ArrayList)(defer.get(other))).size(); h++) {
//				    csp_rr s = (csp_rr)

// 2006-11-23 workaround bug
//					((ArrayList)(defer.get(other))).get(h);

				for (csp_rr s : defer.get(other)) {
				    if  ( (s.wwith == who) &&
				          (r.io != s.io) && // xor
					  (r.ioty == s.ioty)) {
                     send csp_reply[who](true,other,r.arm,r.q1,r.q2);
                     send csp_reply[other](true,who,s.arm,s.q1,s.q2);
		                        status[other] = ALIVE;
		                        active++;
		                        matched = true;
				        break;
			            }
		                }
			    if (matched) break;
			    }
			}
			if (! matched) {
			    status[who] = BLOCKED;
			    defer.set(who, vrr);
			    active--;
			}
		    }
		}
		[] void csp_die(int who)
		  st csp_cantmatch.length() == 0 {
		    status[who] = DEAD;
		    active--;
//            System.err.println("csp2jr: die, active decremented to " + active);
//print_status(false);
		    if (csp_implicit) {
		        /* for implicit termination only
			 * remove who from all pending requests.
			 * if pending set now empty, return fail.
			 */
			for (int k = 0; k < csp_np; k++) {
			    if (status[k] == BLOCKED) {
// 2006-11-23 workaround bug
//				for (int h = ((ArrayList)(defer.get(k))).size()-1;
//				     h >= 0; h--) {
//				    csp_rr s = (csp_rr)
//					((ArrayList)(defer.get(k))).get(h);
//				    if  (s.wwith == who) {
//				        ((ArrayList)(defer.get(k))).remove(h);
//				    }
//			        }
				// don't use for-each since removing.
				// for (csp_rr s : defer.get(k))
				for (int h = defer.get(k).size()-1;
				     h >= 0; h--) {
				    csp_rr s = defer.get(k).get(h);
				    if  (s.wwith == who) {
				        defer.get(k).remove(h);
				    }
			        }
// 2006-11-23 workaround bug
//				if (((ArrayList)(defer.get(k))).size() == 0) {
				if (defer.get(k).size() == 0) { // now empty
				    send csp_reply[k](false,BAD,0,BAD,BAD);
				    status[k] = ALIVE;
				    active++;
				}
			    }
			}
		    }
//            System.err.println("csp2jr: after handling cleanup");
// print_status(false);
		}
		[] void csp_status(int who, boolean brief)
		  st csp_cantmatch.length() == 0 {
		    System.err.println("csp2jr: printing status " +
		                       "on request of process with pid " +
				       	who);
		    print_status(brief);
		}
		[] void csp_cantmatch(int who, String msg) {
		    // attempt to make output deterministic.

		    // put message back
		        send csp_cantmatch(who,msg);
		    // wait in case other processes also can't match.
		    try {
		        Thread.sleep(400);
		    }
		    catch (Exception oops) {
		        System.err.println("Exception while sleeping...\n");
			 oops.printStackTrace();
		    }
		    // handle all messages in order of pid
		    while (csp_cantmatch.length() > 0) {
		        inni void csp_cantmatch(int wwho, String mmsg) by wwho{
			    System.err.println("csp2jr: process with id "+
			                        wwho +
            		                        ": "+mmsg);
			}
		    }
		    print_status(true);
		    JR.exit(1);
		}
	    }
	    // given no JR automatic termination ... do it here
	    // after a short pause, just in case any exiting process
	    // still needs to finish.  (pause is not essential, though.)
	    try {
	        Thread.sleep(200);
	    }
	    catch (Exception oops) {
	        System.err.println("Exception while sleeping...\n");
		 oops.printStackTrace();
	    }
// System.out and System.err don't seem to be atomic (wrt each other)
// hack attempt to prevent interleaved output.
// this made no difference ;-(
//System.out.flush();
//Thread.sleep(40);
//System.err.flush();
//Thread.sleep(10);
            System.err.println("csp2jr: all user processes " +
                               "have terminated or are blocked; " +
                               "shutting down.");
	    print_status(true);
// now have automatic JR termination, so let that do its thing
// so that can use quiescence in CSP program.
// (alternative: add csp_quiescence (ala _main hook)
//  advantage(?): could get that output before termination message below)
//	    JR.exit(0);
    }

    // format stuff for print_status
    // (Java doesn't seem to have equivalent of C's %*s, so simulate that)
    private static final String formatInt = "%4d";
    private static final String formatStatus = "%s";
    private              String formatName; // would-be final
    private              String format1;    // would-be final
    private void formatInit() { // initialization that depends on constructor
	formatName = "%"+setStringPadN()+"s";
	format1 = formatInt + " " + formatStatus + "  " + formatName + " ";
    }
    private static final String format2 = "[" + formatInt + "]";

    // useful to call for debugging csp2jr too.
    private void print_status(boolean brief) {
	int blocked = 0;
	for (int k = 0; k < csp_np; k++) {
	    if (status[k] == BLOCKED) blocked++;
	}
	int dead = csp_np - active - blocked;
        System.err.println("csp2jr: process status: "
            + csp_np  + " total = "
	    + active  + " alive + "
	    + blocked + " blocked + "
	    + dead    + " dead."
	    );


	// if all processes have same status, then no point printing them out.
	if ( brief && (blocked == csp_np ||
                       active  == csp_np ||
                       dead    == csp_np   ) ) return;

	for (int k = 0; k < csp_np; k++) {
	    csp_pdecl d = (csp_pdecl) csp_pdecls.get(csp_pidxs[k].pd);
	    System.err.printf(format1, k, sstat[-status[k]], d.name );
	    if (d.dims > 0 ) {
	        System.err.printf(format2, csp_pidxs[k].i1);
	    }
	    if (d.dims > 1 ) {
	        System.err.printf(format2, csp_pidxs[k].i2);
	    }
            System.err.println();
	}
    }

    // for very pretty output
    private static final int maxPad = 10;
    private int setStringPadN() {
        int stringPad = 1; // each process name will be at least that long!
        for (int csp_p = 0; csp_p < csp_pdecls.size(); csp_p++) {
            csp_pdecl d = (csp_pdecl) csp_pdecls.get(csp_p);
	    if (d.name.length() > maxPad) {
		return maxPad;
	    }
	    stringPad = Math.max(d.name.length(), stringPad);
	}
	return stringPad;
    }

}
