#!/usr/bin/perl

#### reminder: this file (which resides in $JR_HOME/bin or $JR_HOME\bin)
#### is generated from files in $JR_HOME/cmds,
#### so you probably don't want to edit this file directly.

use strict;

sub u_findmain($$);
sub u_init();
sub u_jfindmain();
sub u_jgo($);
sub u_jgot(\@);
sub u_jgox($);
sub u_jr(\@);
sub u_jrc(\@);
sub u_jrfindmain();
sub u_jrgo($);
sub u_jrgot(\@);
sub u_jrgox($);
sub u_jrrun(\@);
sub u_jrt(\@);
sub u_mysystem($);
sub u_quote_args(\@);

# u_jrfindmain does all the work and exits on failure.
my $basen;
$basen = u_jrfindmain();

u_init();
my $exitstatus;
$exitstatus = u_jrgox($basen);
exit $exitstatus;

#
# finds jr or java file containing main
# and then echoes that class name
#
# invoke as jrfindmain for jr files
# invoke as jfindmain for java files
#
# not perfect:
#   assumes main declaration
#     appears entirely on 1 line
#     does not appear in comments.
#     contains no comments within (e.g., "... void /*haha*/ main ...")
#   assumes the program does not have multiple main methods
#        (allowed but probably not common).

sub u_findmain($$) {
  my $suffix = shift(@_);
  my $msg = shift(@_);

  # make sure have at least one file with $suffix
  my $none = 1;
  my @suffixfiles = ("*$suffix");
  foreach my $f ( <@suffixfiles> ) {
    $none = 0;
    last;
  }
  if ($none) {
    $! = 1;
    die "$0 sees no $suffix files\n";
  }

  # build up expression for which to search

  # "void main" part
  my $v = "void\\s+main";

  # parameter parts
  # q is (String [] args)
  # r is (String args [])
  # remember to escape \, (, ), [, ]
  my $idpat = "[a-zA-Z_][a-zA-Z_0-9]*";
  my $q = "\\(\(\\s*final\\s\)?\\s*String\\s*\\[\\s*\\]\\s*$idpat\\s*\\)";
  my $r = "\\(\(\\s*final\\s\)?\\s*String\\s+$idpat\\s*\\[\\s*\\]\\s*\\)";

  my $p = "($q|$r)";

  # specifier parts
  my $s = "(public\\s+static|static\\s+public)";

  my $a = "$s\\s+$v\\s*$p";
  #######print $a;

  my $count = 0;
  my $file = ""; # set only if count>0
  # parallel arrays:
  #   filenames and linenumbers within those files on which main found.
  # just for fancy error output.
  my @allwithmainfilenames = ();
  my @allwithmainlinenumbers = (); 
  foreach my $f ( <@suffixfiles> ) {
  ####  print "xxxxxxxx $f\n";
    open(F,$f);
    my $linenumber = 0;
    while ( <F> ) {
  ####    print "$_\n";
      $linenumber++;
      if (/$a/) {
  #######print "found";
        $count++;
        $file = $f;
	push(@allwithmainfilenames, $f);
	push(@allwithmainlinenumbers, $linenumber);
      }
    }
    close(F);
  }
  ##print $count, "\n";
  ##print $file, "\n";
  ##print $0, "\n";

  if ($count == 0) {
    $! = 1;
    die "$0 can't find main_class\n";
  }
  if ($count != 1) {
    $! = 1;
    print STDERR "$0 found multiple ($count) mains:\n";
    for (my $i = 0; $i < $count; $i++) {
	print STDERR "  file $allwithmainfilenames[$i], line $allwithmainlinenumbers[$i]\n";
    }
    die "use $msg\n";
  }

  my $basen = $file;
  # strip off any leading path
  $basen =~ s#.*/##;
  # strip off suffix
  $basen =~ s/$suffix$//;

  return $basen;
}

my $OSdelim;
my $OSsep;

my @EMPTY = (); # global constant

sub u_init() {

  use Env qw(JR_HOME CLASSPATH OS);

  # $OS defined only (usually) on Windows
  # Cygwin: $OS is windows will work fine
  # provided that Perl was installed within Cygwin.
  if(defined($OS) && $OS =~ /Windows/) {
    $OSdelim = ";";
    $OSsep = "\\";
  }
  else {
    $OSdelim = ":";
    $OSsep = "/";
  }

  if (! $JR_HOME ) {
    $! = 1;
    die "$0 requires environment variable JR_HOME\n"
      . "   to be set to the absolute pathname of JR's home\n";
  }

  if (! opendir (JRHOME, $JR_HOME) ) {
    $! = 1;
    die "$0: environment variable JR_HOME set to $JR_HOME\n"
      . "   but that directory does not exist or is not readable\n";
  }
  if (! closedir(JRHOME)) {
    $! = 1;
    die "$0: cannot close $JR_HOME\n";
  }

  my $JRT_JAR;
  my $JRX_JAR;
  ## print "ct sees jrhome= $JR_HOME\n";

  ##Set the JRT_JAR and JRX_JAR variables
  $JRT_JAR = setjarvar( "JRT", "jrt.jar");
  $JRX_JAR = setjarvar( "JRX", "jrx.jar");

  use Getopt::Long;
  my $optionclasspath;
  # handle only -classpath here.
  # other args specific to jr, jrc, or jrrun (e.g., -version, -explicit)
  # can be handled as needed by those tools.
  Getopt::Long::Configure("pass_through");
  GetOptions('classpath=s' => \$optionclasspath)
  || die "$0: problem processing command line options\n";

  ## print "after GetOptions \n";

  my $cpath;
  if ($optionclasspath) {
    $cpath = $optionclasspath . $OSdelim;
  }
  else {
    $cpath = "";
    if(defined($CLASSPATH)) {
	$cpath = $CLASSPATH . $OSdelim;
    }
  }
  # set CLASSPATH to get JR stuff.
  # until 2003-02 we prepended "." and $JR_JAR.
  # 2004-11-27: put both in CLASSPATH since generated code imports run-time
  $CLASSPATH = $cpath . "." . $OSdelim . $JRT_JAR
                            . $OSdelim . $JRX_JAR;
  ## print "ct1 $CLASSPATH \n";
}

# note: code is nearly the same as in jrv.
# at some point, share this sub.
# (no need to name as u_ since this sub used only within u_init.pl.)
sub setjarvar {
    my $m = shift(@_); # message
    my $f = shift(@_); # jar file

    my $jar = $JR_HOME . "/classes/" . $f;
    my $archname;
    $archname = `perl -V:archname`;
    # special case for Perl within Cygwin
    # since Java needs Windows-style CLASSPATH.
    # code after this if should work fine since Cygwin
    # allows both kinds of names.
    if(defined($OS) && $OS =~ /Windows/ && $archname =~ /cygwin/) {
	# 2007-10-20 quotes needed on $jar since it might contain spaces.
        $jar  = `cygpath -w "$jar"`;
	chomp($jar);
    }

    # Make sure that the file $jar points to is accessible
    # 2006-08-13 was:
    # if ( (-e $jar) !=1 || (-r $JR_HOME) != 1 ) {
    # but discovered that -e returns undefined if file doesn't exist
    # and then can't compare undefined with number.
    # (seems like it should return false.  Oh well, below is better anyway.)
    if ( !(-e $jar) || !(-r $JR_HOME) ) {
	$! = 1;
	die "$0: $m jar file set to " .
	    $jar .
	    "\nbut that file does not exist or is not readable\n";
    }

    return $jar;
}
sub u_jrfindmain() {
  return u_findmain(".jr","`jr name_of_main_class'");
}

sub u_jrgox($) {
  my $basen = shift(@_);

  my @args = ($basen, @ARGV);

  return u_jrrun(@args);
}

sub u_jrrun(\@) {
  my $A = shift(@_);

  # common code set CLASSPATH, but we need it to include jrGen,
  # so we'll set it again (but only add jrGen).
  # until 2003-02 we prepended jrGen.

  $CLASSPATH= $CLASSPATH . $OSdelim . "jrGen";
  ## print "jrrun sees classpath= $CLASSPATH\n";

  my $args = u_quote_args(@$A);
  ##print "u_jrrun $args\n";
  use Env qw( JRSH JRRSH JRSHC );
  # use these variables rather than above to avoid
  # warnings about "Use of uninitialized value ..."
  my $myJRSH  = defined($JRSH ) ? $JRSH  : "";
  my $myJRRSH = defined($JRRSH) ? $JRRSH : "";
  my $myJRSHC = defined($JRSHC) ? $JRSHC : "";

  return u_mysystem ("java -DJRSH=$myJRSH -DJRSHC=$myJRSHC -DJRRSH=$myJRRSH edu.ucdavis.jr.jrx.JRX_impl $args");

}

sub u_mysystem($) {
  my $s = shift(@_);
  system($s);
  return $?>>8;
}

# preserve any quoting on command line by putting each A in quotes.
sub u_quote_args(\@) {
  my $A = shift(@_);
  my $args = "";
  foreach my $a ( @$A ) {
    $args .= "\"$a\" ";
    # print ":$a \n"
  }
  return $args;
}

