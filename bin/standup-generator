#!/usr/bin/env fish

# Promp:
# Context:
# Role and Goal: This GPT will act as a software developer named Oleander. The primary task is to analyze the given git diff and PR comments to create concise notes for a standup meeting. The notes should highlight what Oleander did yesterday, what he did today, and what he plans to do for the rest of the day. The focus will be on summarizing the work without getting too technical.
# Constraints: Avoid overly technical details in the standup notes. The summaries should be clear and concise, suitable for a quick verbal update.
# Guidelines: Review the provided git diff and PR comments, extract key points, and structure the standup notes in bullet form. Maintain a professional and clear tone.
# Clarification: If any information is missing or unclear from the provided inputs, assume reasonable details to complete the standup notes.
# Personalization: The tone should be professional, concise, and focused on work-related updates.
# Description:
# Creates concise standup notes based on git diffs and PR comments.

# Prompt Starters:
# Review the latest git diff and summarize the changes made.
# Summarize the key points from PR comments for standup notes.
# Draft standup notes including tasks completed yesterday, today, and planned tasks.
# Provide a brief update on current work based on the provided diff and comments.

# The meeting mostly constsis of non-tech people so dont talk about code to much.

# The rust CLI should allow for the date to be manually set using words like 'yesterday', 'today', 'last week', etc. This will allow the user to specify the date range for the standup notes.

# Calculate the since_date based on the day of the week
# if test (date +%u) -eq 1
#     set since_date (date -u -v-3d -v14H -v0M -v0S +"%Y-%m-%dT%H:%M:%SZ")
# else
#     set since_date (date -u -v-1d -v14H -v0M -v0S +"%Y-%m-%dT%H:%M:%SZ")
# end

# For simplicity, set since_date to 1 week ago
# Only for testing
set since_date (date -u -v-1w +"%Y-%m-%dT%H:%M:%SZ")
set author oleander
echo "==> Fetching PRs since $since_date for $author..."

# Function to get PRs
# gh api \
# -H "Accept: application/vnd.github+json" \
# -H "X-GitHub-Api-Version: 2022-11-28" \
# /repos/OWNER/REPO/pulls
function pulls --description "Get PRs"
    set map "{number,updatedAt,body}"
    set jq ".[] | select(.updatedAt > \"$since_date\")"
    gh pr list --author $author --json number,updatedAt,body --jq "$jq"
end

# Function to get comments for a PR
# gh api \
# -H "Accept: application/vnd.github+json" \
# -H "X-GitHub-Api-Version: 2022-11-28" \
# /repos/OWNER/REPO/pulls/comments
function comments --description "Get comments for a PR"
    set map "{author: .author.login, body: .body, createdAt: .createdAt}"
    set jq "[.comments[] | select(.createdAt > \"$since_date\") | $map]"
    gh pr view "$argv" --json comments --jq "$jq"
end

# Function to get the diff of a PR
# gh api \
# -H "Accept: application/vnd.github.diff" \
# -H "X-GitHub-Api-Version: 2022-11-28" \
# /repos/OWNER/REPO/pulls/PR_NUMBER
function diff --description "Get the diff of a PR"
    gh pr diff "$argv"
end

set -g markdown "# Standup for $author\n"
set all_pulls (pulls)

echo "==> Found $(count $all_pulls) PRs since $since_date for $author"
if test (count $all_pulls) -eq 0
    echo "==> No PRs found since $since_date for $author"
    exit 0
end

echo "==> Fetching PRs since $since_date for $author..."
for pr in $all_pulls
    set pr_number (echo $pr | jq -r '.number')
    set pr_body (echo $pr | jq -r '.body')
    set df (diff $pr_number)

    set markdown "$markdown\n## PR $pr_number: $pr_body\n\n$df\n"

    for comment in (comments $pr_number | jq -rc '.[]')
        set author (echo -n $comment | jq -r '.author')
        set body (echo $comment | jq -r '.body')
        set createdAt (echo $comment | jq -r '.createdAt')
        set markdown "$markdown\n## PR $pr_number: $pr_body\n\n$author: $body\n"
    end
end

echo "==> Asking OpenAI for a summary..."
fabric -p create_standup -t "$markdown" --model gpt-4o --temp 0 | mdcat - --no-pager
