#!/usr/bin/env fish

function die
    echo -n (set_color red)"Error:"(set_color normal)" $argv" >&2
    echo "" >&2
    exit 1
end

# ensure we're in a Git repo
if not git rev-parse --is-inside-work-tree >/dev/null 2>&1
    die "Not a git repository."
end

# retrieve author email, or bail
function author_email
    set -l email (git config user.email 2>/dev/null)
    if test -z "$email"
        die "git user.email is not set"
    end
    echo $email
end

# find the very first commit by this author
function oldest_hash
    set -l email (author_email)
    set -l hash (git log --author="$email" --format="%h" --reverse \
        | shuf -n 1 | string trim)
    if test -z "$hash"
        die "No commits found by author '$email'"
    end
    echo $hash
end

# load the last-seen hash from config, or default to the oldest one;
# if the stored hash isn't a valid commit, fall back to the oldest
function current_hash
    set -l default_hash (oldest_hash)
    set -l hash (git config --local --default "$default_hash" \
        "git-ok.commit-hash")
    if not git rev-parse --verify --quiet $hash >/dev/null 2>&1
        set hash $default_hash
    end
    echo $hash
end

# pick the very next commit on first-parent ancestry by this author,
# skipping any bot-tagged ("ðŸ¤–") commits
function next_hash
    set -l email (author_email)
    set -l current (current_hash)
    set -l candidate (git rev-list \
        --no-merges \
        --invert-grep --grep='ðŸ¤–' \
        --author="$email" \
        --reverse \
        "$current..HEAD" \
        | head -n1 | string trim)
    if test -z "$candidate"
        die "No new commit found for author '$email' since '$current'"
    end
    echo $candidate
end

# grab that commit's subject line, or fail if it's empty
function commit_message
    set -l hash (next_hash)
    set -l msg (git log -1 --format='%s' "$hash" | string trim)
    if test -z "$msg"
        die "Could not read message for the next commit"
    end

    echo $msg | string replace -r '\s*\(#\d+\)$' ''
end

# if there's nothing to commit, warn and exit
if test -z "$(git status --porcelain)"
    echo (set_color yellow)"Warning:"(set_color normal)" No changes to commit" >&2
    exit 0
end

# record the next hash so we don't pick it again
set -l nexthash (next_hash)
if not git config --local "git-ok.commit-hash" "$nexthash"
    die "Could not write the next commit hash to config"
end

# finally, stage and commit
set -l msg (commit_message)
git add .
exec git commit -m "$msg ðŸ¤–"
