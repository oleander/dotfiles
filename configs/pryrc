# require "rubygems"
# def dependency(name, required_path = nil)
#   gem name
#   require required_path if required_path
# # rescue Gem::MissingSpecError => e
# #   system "gem", "install", name
# #   puts "Reload ..."
# #   exec $PROGRAM_NAME, *ARGV
# end
# 
# # dependency 'colorful_inspect'
# # dependency 'rainbow', 'rainbow/ext/string'
# dependency "pry-theme"
# 
# require 'pathname'
# 
# extend Pry::Helpers::BaseHelpers
# extend Pry::Helpers::Text
# 
# Pry.config.theme = "pry-modern-256"
# Pry.pager = false
# 
# Pry.commands.block_command('reload!', 'Hard reload') do
#   output.puts bold("Reloading session ...")
#   exec $PROGRAM_NAME, *ARGV
# end
# 
# REPLACEMENTS = Gem.paths.path.map do |path|
#   [Pathname(path).cleanpath.to_s, "<gem>"]
# end.to_h.merge(Dir.home => "~")
# 
# def strip(to_be_stripped)
#   REPLACEMENTS.reduce(Pathname(to_be_stripped).cleanpath) do |acc, (path, replacement)|
#     acc.to_s.gsub(path.to_s, replacement)
#   end
# end
# 
# def trace(backtrace)
#   backtrace.reverse.map do |backtrace|
#     next if backtrace.path.include?("gems/pry")
#     "\t%<path>s:%<line>d %<label>s".italic % {
#       path: strip(backtrace.path).italic,
#       line: backtrace.lineno,
#       label: backtrace.label.color(:red)
#     }
#   end.compact.join("\n")
# end

# Pry.exception_handler = proc do |output, e|
#   output.puts "#{e.class.name.color(:red).bold}: #{e.message.italic}"
#   output.puts trace(e.backtrace_locations)
# end

# Pry.config.prompt = -> context, level, * do
#   current_dir = Pathname.getwd.relative_path_from(ENV["HOME"])
#   parts = ["~/" + current_dir.to_s]
#   unless level.zero?
#     parts << ">"
#     parts << colorize_code(context.to_s)
#   end
#
#   parts.join(" ") + " "
# end

# silence_warnings do
#   Pry.start
# end
