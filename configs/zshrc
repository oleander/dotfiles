export ZSH_DISABLE_COMPFIX="true"
export VISUAL=nvim
export EDITOR=nvim
export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
export PAGER="less -R"
export LESSOPEN="|/usr/local/bin/lesspipe.sh %s"
export PATH=$HOME/.cargo/bin:$PATH
export HOMEBREW_CASK_OPTS="--appdir=~/Applications"
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONCOERCECLOCALE=0
export ZSH_DOTENV_PROMPT=false
export PATH="$HOME/.dotfiles/bin:$PATH"
export GIT_MERGE_AUTOEDIT=no
# export BUILDX_BUILDER="desktop-linux"

# Colors
autoload -U colors
colors
setopt prompt_subst

# Zsh options
setopt NO_BG_NICE  # don't nice background tasks
setopt NO_HUP
setopt NO_LIST_BEEP
setopt LOCAL_OPTIONS  # allow functions to have local options
setopt LOCAL_TRAPS  # allow functions to have local traps
setopt HIST_VERIFY
setopt SHARE_HISTORY  # share history between sessions
setopt EXTENDED_HISTORY  # add timestamps to history
setopt PROMPT_SUBST
setopt CORRECT
setopt COMPLETE_IN_WORD
setopt IGNORE_EOF

setopt APPEND_HISTORY  # adds history
setopt INC_APPEND_HISTORY  # adds history incrementally and share it across sessions
setopt HIST_IGNORE_ALL_DUPS  # don't record duplicates in history
setopt HIST_REDUCE_BLANKS
unsetopt HIST_SAVE_BY_COPY
setopt HIST_FCNTL_LOCK
export HISTFILE="$HOME/.zsh_history"
export HISTSIZE=10000
export SAVEHIST=10000
setopt appendhistory # Append new history lines to the history file
setopt sharehistory # Share history across all sessions

export REPORTTIME=5 # Print elapsed time when more than 5 seconds

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# Pasting with tabs doesn't perform completion
zstyle ':completion:*' insert-tab pending

zle -N newtab

# Disable correctness
unsetopt correct_all

# The following lines have been added by Docker Desktop to enable Docker CLI completions.
fpath=(/Users/linus/.docker/completions $fpath)

# Locale settings
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONUTF8=1

# Overcommit settings
export OVERCOMMIT_DISABLE="1"

# SCCache setting
export CACHE_DIR="$HOME/.cache"
export RUSTC_WRAPPER="$(which sccache)"
export RUST_ANALYZER_CACHE="$CACHE_DIR/rust-analyzer"
export SCCACHE_CACHE_SIZE="200G"
export SCCACHE_DIRECT=true

# Pipx path
export PATH="$HOME/.local/bin:$PATH"
if [ -f "$HOME/.config/fabric/fabric-bootstrap.inc" ]; then . "$HOME/.config/fabric/fabric-bootstrap.inc"; fi


if command -v starship >/dev/null 2>&1; then
  export STARSHIP_CONFIG="$HOME/.config/starship.toml"
  export STARSHIP_CACHE="$HOME/.starship/cache"
  eval "$(starship init zsh)"
fi

if [[ -d "$HOME/.local/bin" ]]; then
  export PATH="$HOME/.local/bin:$PATH"
fi

function most() {
  fc -l 1 | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl | head -n25
}

# Determine hostname
function chostname() {
    if [[ $(hostname) =~ local$ ]]; then
        echo "home"
    else
        echo "work"
    fi
}

alias cr='cd ~/Code'
alias dd='cd ~/Desktop'
alias flush='dscacheutil -flushcache'
alias update='sudo /usr/libexec/locate.updatedb'
alias dot='code ~/.dotfiles'
alias history='fc -il 1'
alias vim=nvim
alias sudo='sudo '
alias h='history | grep -m 30 -i'
alias i='issue'
alias c='cheat'

# git
alias gp='git-push'
alias gpp='git --no-pager pull'
alias gs='git --no-pager status --ignore-submodules -s -b'
alias gd='git --no-pager diff --stat'
alias gb='git --no-pager branch'
alias gl='git-log'
alias gdd='git --no-pager diff'
alias gg='commitment'
alias gm='gm.fish'
alias gc='git-verify-checkout'
alias ggg='git --no-pager add . && git commit --no-edit'
alias ggm='git --no-pager commit --no-edit'

# ruby
alias bb='bundle exec'
alias b='bundle install'

alias files='git --no-pager diff --diff-filter=AM --name-only origin/HEAD^ HEAD -- $(pwd) | sort'

alias vim='nvim'
alias vi='nvim'

alias make='just'
alias crate='context-extractor'
alias help2='context-extractor'

alias '??'='gh copilot suggest -t shell'
alias 'git?'='gh copilot suggest -t git'
alias 'gh?'='gh copilot suggest -t gh'
alias 'explain'='gh copilot explain'

alias v='view-github-project'
alias f='format-new-files-since-branch'
alias code='cursor'

export OPENAI_API_KEY="dl://BA747198-1EEF-4C43-8A64-6E083A1A43C7/content"

export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.rbenv/bin:$PATH"

if command -v rbenv >/dev/null 2>&1; then
  eval "$(rbenv init -)"
fi

if command -v gh >/dev/null 2>&1; then
  export GITHUB_TOKEN=$(gh auth token)
  export GITHUB_PERSONAL_ACCESS_TOKEN="$(gh auth token)"
fi

if command -v direnv >/dev/null 2>&1; then
  eval "$(direnv hook zsh)"
fi

# Used by @modelcontextprotocol/server-github in VSCode
export PATH="/opt/homebrew/opt/node@22/bin:$PATH"

# bun completions
if [ -s "$HOME/.bun/_bun" ]; then
  source "$HOME/.bun/_bun"
fi

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

### Added by Zinit's installer
ZINIT_HOME="${HOME}/.local/share/zinit"
# Install Zinit if not already installed
if [[ ! -f "${ZINIT_HOME}/zinit.git/zinit.zsh" ]]; then
    command mkdir -p "${ZINIT_HOME}"
    command git clone https://github.com/zdharma-continuum/zinit "${ZINIT_HOME}/zinit.git"

    # Set appropriate permissions only during installation
    # This ensures the directory is secure without affecting all files recursively
    command chmod go-w "${ZINIT_HOME}"
    command chmod go-w "${ZINIT_HOME}/zinit.git"
fi

source "${ZINIT_HOME}/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
# End of Zinit's installer

# Load Zinit plugins
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-syntax-highlighting

# Load local configuration (not included in git repository)
if [[ -f "$HOME/.zshrc.local" ]]; then
  source "$HOME/.zshrc.local"
fi

# Initialize completions
autoload -Uz compinit
compinit -C
eval "$(gh copilot alias -- zsh)"
export PATH="/opt/homebrew/opt/mariadb-connector-c/bin:$PATH"
