# Setting environment variables
export ROOT=$HOME/.dotfiles
export PATH="/opt/homebrew/bin:$PATH"

# Source custom shell scripts
source ~/.dotfiles/shell/functions
source ~/.dotfiles/shell/exports
source ~/.dotfiles/shell/aliases

# Zsh and Oh My Zsh configuration
export ZSH_CUSTOM="$HOME/.dotfiles/zsh"
export ZSH="$HOME/.oh-my-zsh"

# Oh My Zsh settings
CASE_SENSITIVE="true"
ENABLE_CORRECTION="true"
COMPLETION_WAITING_DOTS="true"
[ -z "$TERM" ] && export TERM=xterm-256color
plugins=(colored-man-pages colorize autojump profiles dotenv)
source $ZSH/oh-my-zsh.sh

# Colors
autoload -U colors
colors
setopt prompt_subst

export ZSH_THEME_GIT_COMMITS_AHEAD_PREFIX=" "
export ZSH_THEME_GIT_COMMITS_BEHIND_PREFIX=" "
export ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[red]%}⁉️%{$reset_color%}"
export ZSH_THEME_GIT_PROMPT_CLEAN=""

# Determine hostname
function chostname() {
    if [[ $(hostname) =~ local$ ]]; then
        echo "home"
    else
        echo "work"
    fi
}

# Prompt configuration
# local STATUS="[mini] %F{8}%~%{$reset_color%}"
# NEWLINE=$'\n'
# export PROMPT="$STATUS%{$reset_color%} "
# export RPROMPT='%F{yellow}$(git_current_branch)%F{blue} $(git_prompt_short_sha)%F{green}$(git_commits_behind)%F{cyan}$(git_commits_ahead) %F{magenta}$(parse_git_dirty)%{$reset_color%}'

# Zsh options
setopt NO_BG_NICE  # don't nice background tasks
setopt NO_HUP
setopt NO_LIST_BEEP
setopt LOCAL_OPTIONS  # allow functions to have local options
setopt LOCAL_TRAPS  # allow functions to have local traps
setopt HIST_VERIFY
setopt SHARE_HISTORY  # share history between sessions
setopt EXTENDED_HISTORY  # add timestamps to history
setopt PROMPT_SUBST
setopt CORRECT
setopt COMPLETE_IN_WORD
setopt IGNORE_EOF

setopt APPEND_HISTORY  # adds history
setopt INC_APPEND_HISTORY  # adds history incrementally and share it across sessions
setopt HIST_IGNORE_ALL_DUPS  # don't record duplicates in history
setopt HIST_REDUCE_BLANKS
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
REPORTTIME=10  # print elapsed time when more than 10 seconds

autoload -U compinit
compinit

# Case-insensitive matching for completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# Pasting with tabs doesn't perform completion
zstyle ':completion:*' insert-tab pending

zle -N newtab

# Disable correctness
unsetopt correct_all

# PATH settings
export PATH="/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH"
export PATH="/opt/homebrew/opt/binutils/bin:$PATH"
export VOLTA_HOME="$HOME/.volta"
export PATH="$VOLTA_HOME/bin:$PATH"
# export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
# export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"

# Zinit installation and plugin loading
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

# Load Zinit plugins
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-syntax-highlighting

# Completion path
fpath=(/opt/homebrew/share/zsh/site-functions $fpath)

# Locale settings
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONUTF8=1
source "$HOME/.cargo/env"

# Overcommit settings
export OVERCOMMIT_DISABLE="1"

# SCCache setting
export CACHE_DIR="$HOME/.cache"
export RUSTC_WRAPPER="$(which sccache)"
export RUST_ANALYZER_CACHE="$CACHE_DIR/rust-analyzer"
export SCCACHE_CACHE_SIZE="200G"

# Docker integration
export PATH="/Users/linus/.docker/bin:$PATH"

# Initialize rbenv
eval "$(rbenv init -)"
export PATH="/opt/homebrew/sbin:$PATH"

# Pipx path
export PATH="/Users/linus/.local/bin:$PATH"
if [ -f "/Users/linus/.config/fabric/fabric-bootstrap.inc" ]; then . "/Users/linus/.config/fabric/fabric-bootstrap.inc"; fi

# Additional SCCache settings
export SCCACHE_DIRECT=true

export STARSHIP_CONFIG="/Users/linus/.config/starship.toml"
export STARSHIP_CACHE="/Users/linus/.starship/cache"
eval "$(starship init zsh)"

# export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
# export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
# export PATH="/opt/homebrew/opt/llvm/bin:$PATH"

#export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
#export PATH="/opt/homebrew/opt/ruby@3.0/bin:$PATH"


export PATH="/opt/homebrew/opt/gawk/libexec/gnubin:$PATH"
#export PKG_CONFIG_PATH="/opt/homebrew/opt/curl/lib/pkgconfig"
#export LDFLAGS="-L/opt/homebrew/opt/curl/lib"
#export CPPFLAGS="-I/opt/homebrew/opt/curl/include"
export PATH="/opt/homebrew/opt/ruby@3.1/bin:$PATH"

export LDFLAGS="-L/opt/homebrew/opt/ruby@3.1/lib"
export CPPFLAGS="-I/opt/homebrew/opt/ruby@3.1/include"
export PKG_CONFIG_PATH="/opt/homebrew/opt/ruby@3.1/lib/pkgconfig"
export PATH="/opt/homebrew/opt/openjdk@11/bin:$PATH"
export PATH="/opt/homebrew/Cellar/ruby@3.1/3.1.6/bin:$PATH"
# eval "$(dip console)"

GEMSDIR=$(gem environment gemdir)/bin
export PATH="$GEMSDIR:$PATH"
